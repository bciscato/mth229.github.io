{
  "hash": "3e909c73d666ef75f99c9d252be51a41",
  "result": {
    "markdown": "## Solving for zeros with julia\n\n\n\n<br/>\nA notebook for this material:\n[ipynb](https://raw.githubusercontent.com/mth229/229-projects/master/04-zeros.ipynb)\n[(Pluto html)](./229-projects/04-zeros.html)\n[(With commentary)](./229-projects/04-zeros-pluto-commentary.html)\n\n\n\n## Introduction\n\n\nA *zero* of the function $f$ is a value $x$ with $f(x) = 0$.\n\n\nSolving for zero of a function is a mathematical skill taught early on. In some cases, such as with linear equations, solving for zeros can be done directly using algebra. Similarly, in the case of factorable polynomials, we are taught to factor and then set each term to 0 to find the possible solutions, utilizing the fact that for the real numbers the product of two numbers is $0$ only if one or both of the numbers is as well.\n\n\nHowever, in general, the problem of finding one (or all) solutions to the equation\n\n\n\n$$\nf(x) = 0.\n$$\n\n\nfor an arbitrary $f$ has no well-defined process.\n\n\nA related problem is to find one (or all) solutions to an equation of this type:\n\n\n\n$$\nf(x) = g(x)\n$$\n\n\nConceptually this is identical to the above, as we just set $h(x) = f(x) - g(x)$ and solve for when $h(x)$ is $0$.\n\n\nHere we discuss a few different elementary means to do find zeros with `Julia`, leaving some others for a later time.\n\n\nWe will use the add-on package `Roots`  which provides implementations of a few zero- and root-finding algorithms.\n\n``` {.julia .cell-code}\nusing MTH229\nusing Plots\n```\n\n\n\n\n## Zeros of a polynomial\n\n\nUnivariate polynomials are algebraic expessions involving an indeterminate. Polynomial functions are functions whose body evaluates a polynomial expression.  These are special functions, in that their relatively simple form allows for many explicit things to be known. A famous example is the **quadratic formula** which for polynomials of degree 2 gives an explicit formula for the *roots*:\n\n\n\n$$\n\\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}.\n$$\n\n\n:::{.callout-note}\n## Alert\nA \"root\" of a polynomial is just a polynomial-specific name for a zero of the polynomial viewed as a function.\n\n:::\n\nFor example, if we have the quadratic polynomial $2x^2 + 3x - 2$ we can solve for the roots with:\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\na = 2; b = 3; c = -2\ndiscr = b^2 - 4*a*c\n(-b + sqrt(discr))/(2a), (-b - sqrt(discr))/(2a)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n(0.5, -2.0)\n```\n:::\n:::\n\n\nIf you wanted to write a function to do this, it would be straightforward, save the detail of needing to make a negative number complex in order to take its square root:\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\n## find roots of ax^2 + bx + c\nfunction quadratic(a, b, c)\n  discr = b^2 - 4*a*c\n  sq = (discr > 0) ? sqrt(discr) : sqrt(discr + 0im)\n\n  [(-b - sq)/(2a), (-b + sq)/(2a)]\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nquadratic (generic function with 1 method)\n```\n:::\n:::\n\n\n:::{.callout-note}\n## Alert\nThis is an example where the function is not *type-stable* as it returns either real-valued answers or complex-valued answers depending on the *values* of the input variables. In general, `Julia` functions avoid this behaviour, as it leads to less performant code.\n\n:::\n\nTo find the roots of $x^2 + x - 1$ we could simply use:\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nquadratic(1, 1, -1)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n2-element Vector{Float64}:\n -1.618033988749895\n  0.6180339887498949\n```\n:::\n:::\n\n\nThere are also such formula for third and fourth degree polynomials. However, Galois – at the tender age of 20 – demonstrated that, in general, there can be no such formula for the roots of a fifth or higher degree polynomial. There are still facts known about such polynomials. For example, the *Fundamental theorem of algebra* states that every real-valued polynomial of degree $n$ will have $n$ roots, where we count complex roots and multiplicities.\n\n\n## Graphical solutions\n\n\nMore generally, the equation $f(x) = 0$ may not have any special form leading to a known solution. In this case, there are various techniques to find zeros. Here we mention graphing, such as is done with a graphing calculator. In the next section, we discuss the bisection algorithm for root finding.\n\n\n##### Finding a zero\n\n\nThe flight of an arrow can be modeled using various functions, depending on assumptions. Suppose an arrow is launched in the air from a height of 0 feet above the ground at an angle of $\\theta = \\pi/4$. With a suitable choice for the initial velocity, a model without wind resistance for the height of the arrow at a distance $x$ units away may be:\n\n\n\n$$\nj(x) = \\tan(\\theta) x - (1/2) \\cdot g(\\frac{x}{v_0 \\cos\\theta})^2.\n$$\n\n\nIn `Julia` we have, taking $v_0=200$:\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nj(x; theta=pi/4, g=32, v0=200) = tan(theta)*x - (1/2)*g*(x/(v0*cos(theta)))^2\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nj (generic function with 1 method)\n```\n:::\n:::\n\n\nWith a velocity-dependent wind resistance given by $\\gamma$, again with some units, a similar equation can be constructed. It takes a different form:\n\n\n\n$$\ny(x) = (\\frac{g}{\\gamma v_0 \\cos(\\theta)} + \\tan(\\theta)) \\cdot x  +\n      \\frac{g}{\\gamma^2}\\log(\\frac{v_0\\cos(\\theta) - \\gamma x}{v_0\\cos(\\theta)})\n$$\n\n\nAgain, $v_0$ is the initial velocity and is taken to be $200$ and $\\gamma$ a resistance, which we take to be $1$. With this, we have the following `Julia` definition (with a slight reworking of $\\gamma$):\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\nfunction y(x; theta=pi/4, g=32, v0=200, gamma=1)\n\t a = gamma * v0 * cos(theta)\n\t (g/a + tan(theta)) * x + g/gamma^2 * log((a-gamma^2 * x)/a)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\ny (generic function with 1 method)\n```\n:::\n:::\n\n\nFor each model, we wish to find the value of $x$ after launching where the height is modeled to be 0. That is how far will the arrow travel before touching the ground?\n\n\nFor the model without wind resistance, we can graph the function easily enough. Let's guess the distance is no more than 500 feet:\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nplot(j, 0, 500)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n![](zeros_files/figure-html/cell-10-output-1.svg){}\n:::\n:::\n\n\nWell, we haven't even seen the peak yet. Plotting over a wider interval will show that $1250$ is the largest root. So we plot over this domain to visualize the flight:\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\nplot(j, 0, 1250)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n![](zeros_files/figure-html/cell-11-output-1.svg){}\n:::\n:::\n\n\nAs for the model with wind resistance,  a quick plot over the same interval, $[0, 1250]$ yields:\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\nplot(y, 0, 1250)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n![](zeros_files/figure-html/cell-12-output-1.svg){}\n:::\n:::\n\n\nOh, \"Domain Error.\" Of course, when the argument to the logarithm is negative we will have issues.\n\n\nWe solve for when $a-\\gamma^2 x$ is $0$:\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\ngamma = 1\na = 200 * cos(pi/4)\nb = a/gamma^2\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n141.4213562373095\n```\n:::\n:::\n\n\nWe try on the reduced interval avoiding the obvious *asymptote* at `b`  by subtracting $1$:\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\nplot(y, 0, b - 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n![](zeros_files/figure-html/cell-14-output-1.svg){}\n:::\n:::\n\n\nNow we can see the zero is around 140. We re-plot:\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\nplot(y, 135, 141)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n![](zeros_files/figure-html/cell-15-output-1.svg){}\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\nplot(y, 140, 141)\nplot!(zero)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n![](zeros_files/figure-html/cell-16-output-1.svg){}\n:::\n:::\n\n\nThe answer is approximately $140.7$\n\n\nFinally, we plot both graphs at once to see that it was a very windy day indeed.\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\nb = 140.7\nplot(j , 0, 1250)\nplot!(y, 0, b)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n![](zeros_files/figure-html/cell-17-output-1.svg){}\n:::\n:::\n\n\n##### Example: Finding a zero\n\n\nSometimes, the equation $f(x)=0$ is actually presented as $h(x)= g(x)$. This form can be rewritten as $f(x) = h(x) - g(x) = 0$, or if working graphically we can just look for crossing points of the graphs of $g(x)$ and $h(x)$. Here we shall do that.\n\n\nWe wish to compare two trash collection plans\n\n\n  * Plan 1: You pay 47.49 plus 0.77 per bag.\n  * Plan 2: You pay 30.00 plus 2.00 per bag.\n\n\nThere are some cases where plan 1 is cheaper and some where plan 2 is. Categorize them.\n\n\nBoth plans are *linear models* and may be expressed in *slope-intercept* form:\n\n::: {.cell execution_count=17}\n``` {.julia .cell-code}\nplan1(x) = 47.49 + 0.77x\nplan2(x) = 30.00 + 2.00x\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nplan2 (generic function with 1 method)\n```\n:::\n:::\n\n\nAssuming this is a realistic problem and an average American household might produce 10-20 bags of trash a month (yes, that seems too much!) we plot in that range:\n\n::: {.cell execution_count=18}\n``` {.julia .cell-code}\nplot(plan1, 10, 20)\nplot!(plan2)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n![](zeros_files/figure-html/cell-19-output-1.svg){}\n:::\n:::\n\n\nWe can see the intersection point is around 14 and that if a family generates between 0-14 bags of trash per month that plan 2 would be cheaper, otherwise they should opt for plan 1.\n\n\n### Practice\n\n\n#### Question\n\n\nGraphically estimate the one zero of $f(x) = e^x - x^3$ over the interval $[0,4]$.\n\n::: {.cell execution_count=19}\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='11533602475969923509' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_11533602475969923509\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"11533602475969923509\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='11533602475969923509_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"11533602475969923509\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 1.8571838602078352) <= 0.1);\n  var msgBox = document.getElementById('11533602475969923509_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_11533602475969923509\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_11533602475969923509\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nSolving equations of the type $f(x)=g(x)$ for $x$ can also be done graphically. One method is to plot *both* functions and look for crossing points. Use this approach to graphically estimate all solutions to $\\cos(x) = x^2$ over the interval $(-\\pi/2, \\pi/2)$. What are they?\n\n::: {.cell execution_count=20}\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='3775625013462882058' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_3775625013462882058\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_3775625013462882058_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_3775625013462882058\"\n              id=\"radio_3775625013462882058_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        0.0\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_3775625013462882058_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_3775625013462882058\"\n              id=\"radio_3775625013462882058_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        -1.57, 1.57\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_3775625013462882058_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_3775625013462882058\"\n              id=\"radio_3775625013462882058_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        -0.82, 0.82\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='3775625013462882058_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_3775625013462882058\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('3775625013462882058_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_3775625013462882058\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_3775625013462882058\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nIn an analysis of rainbows, [Airy](http://en.wikipedia.org/wiki/Airy_function) developed a special function implemented as `airyai` in `Julia`'s `SpecialFunctions` package, which is loaded with the `MTH229` package. The zeros of this function are all negative. The first one is between $-3$ and $-1$. Find it graphically.\n\n::: {.cell execution_count=21}\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='5578089437602154246' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_5578089437602154246\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"5578089437602154246\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='5578089437602154246_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"5578089437602154246\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - -2.338107410459764) <= 0.1);\n  var msgBox = document.getElementById('5578089437602154246_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_5578089437602154246\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_5578089437602154246\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nThe polynomial $f(x) = x^5 - 6x^3 - 6x^2 -7x - 6$ has three real roots. Which of the following values is not one of them? Try to solve this graphically.\n\n::: {.cell execution_count=22}\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='15849187126620641893' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_15849187126620641893\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_15849187126620641893_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_15849187126620641893\"\n              id=\"radio_15849187126620641893_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        5\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_15849187126620641893_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_15849187126620641893\"\n              id=\"radio_15849187126620641893_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        3\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_15849187126620641893_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_15849187126620641893\"\n              id=\"radio_15849187126620641893_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        -2\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_15849187126620641893_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_15849187126620641893\"\n              id=\"radio_15849187126620641893_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        -1\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='15849187126620641893_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_15849187126620641893\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('15849187126620641893_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_15849187126620641893\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_15849187126620641893\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nLet $y(x)$ be defined as above to model the flight of an arrow. If $\\gamma=1/2$ when will the arrow strike the ground after launch?\n\n::: {.cell execution_count=23}\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='13340839151816294801' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_13340839151816294801\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"13340839151816294801\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='13340839151816294801_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"13340839151816294801\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 0.0) <= 2);\n  var msgBox = document.getElementById('13340839151816294801_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_13340839151816294801\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_13340839151816294801\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nLet $y(x)$ be defined as above to model the flight of an arrow. Suppose a hill is in the path of the arrow. The hill is given by this function:\n\n::: {.cell execution_count=24}\n``` {.julia .cell-code}\nhill(x) = x > 100 ? 2.0*(x-100) : 0.0\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nhill (generic function with 1 method)\n```\n:::\n:::\n\n\nBy solving `y(x) = hill(x)` solve for how far the arrow will fly before hitting the hill.\n\n::: {.cell execution_count=25}\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='9272132524888373371' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_9272132524888373371\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"9272132524888373371\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='9272132524888373371_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"9272132524888373371\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 117.12786286825508) <= 2);\n  var msgBox = document.getElementById('9272132524888373371_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_9272132524888373371\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_9272132524888373371\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n## Bisection algorithm\n\n\nThe last example had us graphically \"zoom\" in on a zero, and led us to an estimate to $1$ or $2$ decimal points. Trying to get more accuracy than that graphically is at best tedious.  Here we discuss a method to get as much accuracy as is numerically possible based on the [intermediate value theorem](http://en.wikipedia.org/wiki/Intermediate_value_theorem):\n\n\n**The intermediate value theorem**: If $f(x)$ is a continuous function on $[a,b]$ then at some point in the interval $f(x)$ takes on any value between $f(a)$ and $f(b)$.\n\n\nIn particular if $f(x)$ is continuous with $f(a)$ and $f(b)$ having *different* signs then there must be a point $c$ in $[a,b]$ where $f(c) = 0$. (When $f(a)$ and $f(b)$ have different signs, we say $a$ and $b$ *bracket* a root.)  This observation is due to Bolzano.\n\n\nThe bisection algorithm utilizes Bolzano's observation. It is a simple *iterative* procedure for finding such a value $c$ when we have a continuous function and a bracketing interval.\n\n\n:::{.callout-note}\n## Alert\nThe bisection method does not work when the function does not **cross** the $x$ axis at the root. For example, the zero at $0$ of $f(x) = x^2 e^x$ would not be found with this method.\n\n:::\n\nMathematically the basic idea is simple.\n\n\nStarting with $[a,b]$, the midpoint $M = (a + b)/2$, is tested for its function value. If $f(M) = 0$, great, we are done. If it has opposite sign of $f(a)$, then a root must be in the interval $[a,M]$, so the problem is reduced a smaller interval. Otherwise, it has opposite sign of $f(b)$ and the problem is reduced to $[M,b]$. Either way, the algorithm is repeated for the smaller interval where a root is known. As each step halves the interval length, it must eventually converge to an answer.\n\n\nGraphically, we could do this. For example, Let's consider $f(x) = x^2 - 2$ with the bracketing interval $[1,2]$. We first plot:\n\n::: {.cell execution_count=26}\n``` {.julia .cell-code}\nf(x) = x^2 - 2\na,b = 1, 2\nplot(f, a, b)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n![](zeros_files/figure-html/cell-27-output-1.svg){}\n:::\n:::\n\n\nWe can see that $c = (a + b)/2 = 3/2$ will have $f(c) > 0$, so the new bracket is $[a,c]$:\n\n::: {.cell execution_count=27}\n``` {.julia .cell-code}\na, b = a, (a + b)/2\nplot(f, a, b)\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n![](zeros_files/figure-html/cell-28-output-1.svg){}\n:::\n:::\n\n\nNow the midpoint is negative, so we modify `a`:\n\n::: {.cell execution_count=28}\n``` {.julia .cell-code}\na, b = (a + b)/2, b\nplot(f, a, b)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n![](zeros_files/figure-html/cell-29-output-1.svg){}\n:::\n:::\n\n\nAnd again, this has a midpoint in the negative territory so again we modify `a`:\n\n::: {.cell execution_count=29}\n``` {.julia .cell-code}\na, b = (a + b)/2, b\nplot(f, a, b)\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n![](zeros_files/figure-html/cell-30-output-1.svg){}\n:::\n:::\n\n\nAnd now, as the midpoint is in positive territory we would modify $b$ ...\n\n\nThis gets tedious to do graphically. But it can be easily programmed. The main step might look something like this:\n\n::: {.cell execution_count=30}\n``` {.julia .cell-code}\nf(x) = x^2 - 2\na, b = 1, 2\n\nc = (a + b) /2\n\nif f(a) * f(c) < 0\n  a, b = a, c\nelse\n  a, b = c, b\nend\na,b\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n(1, 1.5)\n```\n:::\n:::\n\n\nThough some check if `f(c) == 0` is also needed.\n\n\nHere $c=1.5$ and the new interval is $[1.0, 1.5]$, as we had graphically. We just need to repeat the above.\n\n\nIt seems as though we could be here all day. Indeed, if doing this by hand it might take up quite a bit of time. We should automate this. Before automating this, we need to think: *when would we stop?*\n\n\nMathematically we can keep taking halves using the concept of a limit. See for example [Zeno's paradox](http://en.wikipedia.org/wiki/Zenos_paradoxes). On a computer we don't have such a luxury. In fact, for floating point numbers we couldn't keep taking halves – even if we wanted – as ultimately we should expect tp get `a` and `b` being floating point values that are next to each other – and hence there is no midpoint. (Well, there are some cases that suggest a more careful numeric approach to the above.)\n\n\nSo even though this doesn't make mathematical sense we can try stopping when the following condition is no longer true:\n\n::: {.cell execution_count=31}\n``` {.julia .cell-code}\na < c < b\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\nfalse\n```\n:::\n:::\n\n\nA `while` loop is used to repeat the central step until the above (or some variant) is `false`.\n\n\nThe `MTH229` package has a `bisection` method implemented for this which also outputs a graphical indication of the first few steps taken.\n\n\nOkay, let's look at the function $f(x) = -16x^2 + 32x$. We know that 0 and $2$ are roots. Let's see if our algorithm finds them:\n\n::: {.cell execution_count=32}\n``` {.julia .cell-code}\nf(x) = -16x^2 + 32x\nbisection(f, -1, 1) ## should find 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\na###############################################################b\n... exact answer found ...\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n0.0\n```\n:::\n:::\n\n\n::: {.cell execution_count=33}\n``` {.julia .cell-code}\nbisection(f, 1, 3)  ## should find 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\na###############################################################b\n... exact answer found ...\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n2.0\n```\n:::\n:::\n\n\nOkay, it seems to work. Lets try it on a less trivial problem. We know $\\sin(x)$ and $\\cos(x)$ cross in the interval $[0, \\pi/2]$. If we are too tired to remember where, we can simply ask:\n\n::: {.cell execution_count=34}\n``` {.julia .cell-code}\nf(x) = cos(x) - sin(x)\nx = bisection(f, 0, pi/2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\na###############################################################b\n................................a###############################b\n................................a###############b................\n................................a#######b........................\n................................a###b............................\n................................a#b..............................\n................................ab...............................\n                                ⋮⋮                               \n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\n0.7853981633974483\n```\n:::\n:::\n\n\nIs `x` really a zero?\n\n::: {.cell execution_count=35}\n``` {.julia .cell-code}\nx, f(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n(0.7853981633974483, 1.1102230246251565e-16)\n```\n:::\n:::\n\n\nHmm, the answer is `1.1102230246251565e-16`. So technically this is not a zero. But *computationally* it is a zero! First it should be clear that it is *really close* to zero. We will see it is as close as computationally possible to a zero.\n\nThe `nextfloat` and `prevfloat` functions find the floating point values just bigger than `x` and just smaller. In this case we have that `f(x)` and `f(nextfloat(x))` have different signs:\n\n::: {.cell execution_count=36}\n``` {.julia .cell-code}\nf(x),  f(nextfloat(x))\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\n(1.1102230246251565e-16, -1.1102230246251565e-16)\n```\n:::\n:::\n\n\nSo $f$ is crossing $0$ between the value we found, `x` and, the\nfloating point value just a bit bigger. We can't realistically expect\nto get any closer than that, as there are no machine numbers in between these two.\n\n\n### The Roots package and find_zero\n\n\nThe bisection method, while easy to describe and understand, can be made a bit more efficient. The `find_zero` function from the `Roots` package does so. This package is loaded when `MTH229` is. This function uses a tuple to specify the bracketing interval. but does not need to typed in.\n\n\nFor example, to find a root of $f(x) = 2x \\cdot \\exp(-20) - 2 \\cdot \\exp(-20x) + 1$ in the interval $[0,1]$ we have:\n\n::: {.cell execution_count=37}\n``` {.julia .cell-code}\nusing Roots\nf(x) = 2x * exp(-20) - 2 * exp(-20x) + 1\nfind_zero(f, (0, 1))\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n0.03465735902085385\n```\n:::\n:::\n\n\nThe `find_zero` function is actually an interface to various root-finding algorithms. When called as above – with two intial starting points – it uses a bracketing approach as discussed here, though with a different notion of the midpoint.\n\n\nA slightly different interface is given by the `fzero` function, where that above would be:\n\n::: {.cell execution_count=38}\n``` {.julia .cell-code}\nfzero(f, 0, 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n0.03465735902085385\n```\n:::\n:::\n\n\n##### Example: Graphical and numerical answers\n\n\nOne needs to know where to look in order to use the bisection method. The basic \"one-two punch\" is:\n\n\n  * graph the function to identify quickly values $[a,b]$ which bound a zero, then\n  * use the bisection method to find the zero to many decimal points.\n\n\nHere we illustrate with the problem of finding all intersection points of $e^x = x^4$ over the interval $[0,10]$.\n\n\nRecall, solving for $g(x) = h(x)$ is identical to the problem of solving $f(x) = 0$, where we define $f(x) = g(x) - h(x)$. So our problem is to find solutions to $e^x - x^4 = 0$.\n\n\nA quick plot shows that the function has such a wide range that looking over the entire domain at once will be problematic:\n\n::: {.cell execution_count=39}\n``` {.julia .cell-code}\nf(x) = exp(x) - x^4\nplot(f, 0, 10)\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n![](zeros_files/figure-html/cell-40-output-1.svg){}\n:::\n:::\n\n\nInstead, we look between $[0,3]$ and $[8,9]$. A quick confirmation shows these are good choices to use. For example, between $8$ and $9$ we have:\n\n::: {.cell execution_count=40}\n``` {.julia .cell-code}\nplot(f, 8, 9)\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n![](zeros_files/figure-html/cell-41-output-1.svg){}\n:::\n:::\n\n\nSo we find the values of the zero in the bracketed region $[8,9]$:\n\n::: {.cell execution_count=41}\n``` {.julia .cell-code}\nfind_zero(f, (8, 9))\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\n8.6131694564414\n```\n:::\n:::\n\n\nThe root within $[0, 3]$ is found with:\n\n::: {.cell execution_count=42}\n``` {.julia .cell-code}\nfind_zero(f, (0, 3))\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\n1.4296118247255556\n```\n:::\n:::\n\n\n### Problems\n\n\n#### Question\n\n\nIn the bisection method algorithm we checked that the value of $f$ at $a$ and $b$ had opposite signs by looking at $f(a)\\cdot f(b)$. Why did this work?\n\n::: {.cell execution_count=43}\n\n::: {.cell-output .cell-output-display execution_count=44}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='14599855187105699590' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_14599855187105699590\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14599855187105699590_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14599855187105699590\"\n              id=\"radio_14599855187105699590_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        The product of two numbers will have the sign of the first one.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14599855187105699590_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14599855187105699590\"\n              id=\"radio_14599855187105699590_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        The product of two numbers is never negative\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14599855187105699590_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14599855187105699590\"\n              id=\"radio_14599855187105699590_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        The product of 2 numbers with opposite signs is negative, the product of 2 numbers with the same signs is positive\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='14599855187105699590_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_14599855187105699590\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('14599855187105699590_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_14599855187105699590\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_14599855187105699590\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question: are there other roots in $[-10, 0]$?\n\n\nThere is another root in the interval $[-10, 0]$ for the function $f(x) = e^x - x^4$. Find its value numerically:\n\n::: {.cell execution_count=44}\n\n::: {.cell-output .cell-output-display execution_count=45}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='16694258430527780777' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_16694258430527780777\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"16694258430527780777\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='16694258430527780777_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"16694258430527780777\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - -0.7034674224983917) <= 0.001);\n  var msgBox = document.getElementById('16694258430527780777_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_16694258430527780777\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_16694258430527780777\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n#### Question: relation between $x^2$ and $x \\log(x)$\n\n\nLet $f(x) = x^2 - 10 \\cdot x \\cdot \\log(x)$. This function has two zeros on the positive $x$ axis. You are asked to find the largest (graph and bracket...):\n\n::: {.cell execution_count=45}\n\n::: {.cell-output .cell-output-display execution_count=46}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='16650891966933224641' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_16650891966933224641\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"16650891966933224641\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='16650891966933224641_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"16650891966933224641\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 35.77152063957298) <= 0.001);\n  var msgBox = document.getElementById('16650891966933224641_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_16650891966933224641\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_16650891966933224641\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nThe `airyai` function has infinitely many negative roots, as the function oscillates when $x < 0$. In a previous problem we graphically found the largest root. Now find the *second largest root* using the graph to bracket the answer, and then solving.\n\n::: {.cell execution_count=46}\n\n::: {.cell-output .cell-output-display execution_count=47}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='85632918881578311' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_85632918881578311\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"85632918881578311\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='85632918881578311_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"85632918881578311\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - -4.087949444130973) <= 1.0e-8);\n  var msgBox = document.getElementById('85632918881578311_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_85632918881578311\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_85632918881578311\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n#### Question: what goes up must come down...\n\n\n![Up and down](http://ej.iop.org/images/0143-0807/33/1/149/Full/ejp405251f1_online.jpg)\n\n\nIn 1638, according to [Amir D. Aczel](http://books.google.com/books?id=kvGt2OlUnQ4C&pg=PA28&lpg=PA28&dq=mersenne+cannon+ball+tests&source=bl&ots=wEUd7e0jFk&sig=LpFuPoUvODzJdaoug4CJsIGZZHw&hl=en&sa=X&ei=KUGcU6OAKJCfyASnioCoBA&ved=0CCEQ6AEwAA#v=onepage&q=mersenne%20cannon%20ball%20tests&f=false), an experiment was performed in the French Countryside. A monk, Marin Mersenne, launched a cannonball straight up into the air in an attempt to help Descartes prove facts about the rotation of the earth. Though the experiment was not successful, Mersenne later observed that the time for the cannonball to go up was greater than the time to come down. [According to \"Vertical Projection in a Resisting Medium: Reflections on Observations of Mersenne \".](http://www.maa.org/publications/periodicals/american-mathematical-monthly/american-mathematical-monthly-contents-junejuly-2014)\n\n\nThis isn't the case for simple ballistic motion where the time to go up is equal to the time to come down. We can \"prove\" this numerically. For simple ballistic motion, $f(t) = -(1/2)\\cdot 32 t^2 + v_0t$. The time to go up and down are found by the two zeros of this function. The peak time is related to a zero of a function given by `D(f)`, which for now we'll take as a mystery function, but later will be known as the derivative.\n\n\nLet $v_0= 390$. The three times in question can be found from the zeros of `f` and `f'`. What are they?\n\n::: {.cell execution_count=47}\n\n::: {.cell-output .cell-output-display execution_count=48}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='6646553016716675463' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_6646553016716675463\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_6646553016716675463_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_6646553016716675463\"\n              id=\"radio_6646553016716675463_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\((0.0, 12.1875, 24.375)\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_6646553016716675463_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_6646553016716675463\"\n              id=\"radio_6646553016716675463_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\((0.0, 625.0, 1250.0)\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_6646553016716675463_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_6646553016716675463\"\n              id=\"radio_6646553016716675463_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\((-4.9731, 0.0, 4.9731)\\)\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='6646553016716675463_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_6646553016716675463\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('6646553016716675463_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_6646553016716675463\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_6646553016716675463\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question: what goes up must come down... (again)\n\n\nFor simple ballistic motion you find that the time to go up is the time to come down. For motion within a resistant medium, such as air, this isn't the case. Suppose a model for the height as a function of time is given by\n\n\n\n$$\nh(t) = (\\frac{g}{\\gamma^2} + \\frac{v_0}{\\gamma})(1 - e^{-\\gamma t}) - \\frac{gt}{\\gamma}\n$$\n\n\n([From \"On the trajectories of projectiles depicted in early ballistic Woodcuts\"](http://www.researchgate.net/publication/230963032_On_the_trajectories_of_projectiles_depicted_in_early_ballistic_woodcuts))\n\n\nHere $g=32$, again we take $v_0=390$, and $\\gamma$ is a drag coefficient that we will take to be $1$.  This is valid when $h(t) \\geq 0$.  In `Julia`, rather than hard-code the parameter values, for added flexibility we can pass them in as keyword arguments:\n\n::: {.cell execution_count=48}\n``` {.julia .cell-code}\nh(t; g=32, v0=390, gamma=1) = (g/gamma^2 + v0/gamma)*(1 - exp(-gamma*t)) - g*t/gamma\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\nh (generic function with 1 method)\n```\n:::\n:::\n\n\nNow find the three times: $t_0$, the starting time; $t_a$, the time at the apex of the flight; and $t_f$, the time the object returns to the ground.\n\n::: {.cell execution_count=49}\n\n::: {.cell-output .cell-output-display execution_count=50}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='10740238484915205448' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_10740238484915205448\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_10740238484915205448_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_10740238484915205448\"\n              id=\"radio_10740238484915205448_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\((0, 2.579, 13.187)\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_10740238484915205448_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_10740238484915205448\"\n              id=\"radio_10740238484915205448_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\((0, 32.0, 390.0)\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_10740238484915205448_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_10740238484915205448\"\n              id=\"radio_10740238484915205448_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\((0, 13.187, 30.0)\\)\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='10740238484915205448_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_10740238484915205448\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('10740238484915205448_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_10740238484915205448\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_10740238484915205448\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n## The `find_zeros` function\n\n\nSo, `find_zero` finds one value within a bracket. But this suggests a means to find all (most?) of the zeros within an interval – split the interval up into many pieces; identify those that bracket a zero; use `find_zero` on those intervals; accumulate the results.\n\n\nThis is basically implemented in the `find_zeros(f, a, b)` function. So, to find the zeros of $e^x - x^4$ over $[-10, 10]$ we have:\n\n::: {.cell execution_count=50}\n``` {.julia .cell-code}\nf(x) = exp(x) - x^4\nfind_zeros(f, -10, 10)\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\n3-element Vector{Float64}:\n -0.8155534188089606\n  1.4296118247255556\n  8.613169456441398\n```\n:::\n:::\n\n\nThe above description will only work for zeros which cross the $x$ axis, but `find_zeros` tries a bit more. So, it will find the zero of $f(x) = x^2 \\cdot e^x$:\n\n::: {.cell execution_count=51}\n``` {.julia .cell-code}\nf(x) = x^2 * exp(x)\nfind_zeros(f, -1, 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\n1-element Vector{Float64}:\n 0.0\n```\n:::\n:::\n\n\nThat being said, `find_zeros` can miss zeros, so a graph is always suggested to verify the zeros are exhausted.\n\n\nThe `fzeros` function is an alternate name for `find_zeros`.\n\n\n## Polynomials of higher degrees\n\n\nFor Polynomials of higher degree, there are some specific methods that can be used to identify the roots. We will demonstrate the methods from the `SymPy` package. These work on symbolic expressions. These will be described in more detail later, but for now, we have to make a *symbolic* variable, `x` to proceed:\n\n::: {.cell execution_count=52}\n``` {.julia .cell-code}\n@syms x\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\n(x,)\n```\n:::\n:::\n\n\nThe two functions we discuss are `sympy.roots` and `sympy.real_roots`.\n\n\nFirst consider the quadratic equation below. We can identify the real roots of algebraic type with:\n\n::: {.cell execution_count=53}\n``` {.julia .cell-code}\nf(x) = x^2 + x - 1\nsympy.real_roots(f(x))\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\n2-element Vector{Sym}:\n -sqrt(5)/2 - 1/2\n -1/2 + sqrt(5)/2\n```\n:::\n:::\n\n\nThat was so easy, we'll do it again. What are the roots of the polynomial $f(x) = -16x^2 + 32x + 6$?\n\n::: {.cell execution_count=54}\n``` {.julia .cell-code}\nf(x) = -16x^2 + 32x + 6\nsympy.real_roots(f(x))\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```\n2-element Vector{Sym}:\n 1 - sqrt(22)/4\n 1 + sqrt(22)/4\n```\n:::\n:::\n\n\nAs can be seen, $f$ has two real roots. This next polynomial has none:\n\n::: {.cell execution_count=55}\n``` {.julia .cell-code}\nf(x) = x^2 + x + 1\nsympy.real_roots(f(x))\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```\nAny[]\n```\n:::\n:::\n\n\n### All algebraic roots\n\n\nThese are examples of the general template **action(function_object, args...)** for performing some action on a function. In this case, the action is to find the roots of a function which specifies a polynomial function and the additional *args...* are not necessary–if only complex values are desired.\n\n\nFor some problems only the possible real roots are desired.\n\n\nThe following polynomial has both real roots and complex roots. The real one are\n\n::: {.cell execution_count=56}\n``` {.julia .cell-code}\nf(x) = (x^2 + x + 1) * (x^2 + x - 1)\nsympy.real_roots(f(x))\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```\n2-element Vector{Sym}:\n -sqrt(5)/2 - 1/2\n -1/2 + sqrt(5)/2\n```\n:::\n:::\n\n\nCompare to\n\n::: {.cell execution_count=57}\n``` {.julia .cell-code}\nsympy.roots(f(x))\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```\nDict{Any, Any} with 4 entries:\n  -1/2 + sqrt(3)*I/2 => 1\n  -1/2 - sqrt(3)*I/2 => 1\n  -1/2 + sqrt(5)/2   => 1\n  -sqrt(5)/2 - 1/2   => 1\n```\n:::\n:::\n\n\nThe word \"algebraic\" was used, as some problems have answers, but not readily expressible ones. For example, `x^5 -x - 1`:\n\n::: {.cell execution_count=58}\n``` {.julia .cell-code}\nf(x) = x^5 - x - 1\nsympy.roots(f(x))\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```\nDict{Any, Any}()\n```\n:::\n:::\n\n\nHowever, the `solve` function (which solves `f(x)=0`) does hint at answers:\n\n::: {.cell execution_count=59}\n``` {.julia .cell-code}\nsolve(f(x))\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```\n5-element Vector{Sym}:\n CRootOf(x^5 - x - 1, 0)\n CRootOf(x^5 - x - 1, 1)\n CRootOf(x^5 - x - 1, 2)\n CRootOf(x^5 - x - 1, 3)\n CRootOf(x^5 - x - 1, 4)\n```\n:::\n:::\n\n\nThese can be revealed, but converting them to numeric with `N`:\n\n::: {.cell execution_count=60}\n``` {.julia .cell-code}\nN.(solve(f(x)))\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```\n5-element Vector{Number}:\n                     1.167303978261418684256045899854842180720560371525489039140082449275651903429536\n -0.7648844336005847 - 0.35247154603172626im\n -0.7648844336005847 + 0.35247154603172626im\n 0.18123244446987538 - 1.0839541013177107im\n 0.18123244446987538 + 1.0839541013177107im\n```\n:::\n:::\n\n\n### Practice\n\n\n#### Question\n\n\nFind all roots of the function $f(x) = x^4 - 4x^2 -4x + 2$. Are they all real numbers?\n\n::: {.cell execution_count=61}\n\n::: {.cell-output .cell-output-display execution_count=62}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='13642134645638438493' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_13642134645638438493\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_13642134645638438493_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_13642134645638438493\"\n              id=\"radio_13642134645638438493_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        No, none are real\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_13642134645638438493_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_13642134645638438493\"\n              id=\"radio_13642134645638438493_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Yes, the are all real\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_13642134645638438493_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_13642134645638438493\"\n              id=\"radio_13642134645638438493_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        No, some are real, some are complex\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='13642134645638438493_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_13642134645638438493\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('13642134645638438493_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_13642134645638438493\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_13642134645638438493\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nFind the largest real root of the polynomial $x^2 + x - 5$\n\n::: {.cell execution_count=62}\n\n::: {.cell-output .cell-output-display execution_count=63}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='17408700114163635740' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_17408700114163635740\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"17408700114163635740\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='17408700114163635740_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"17408700114163635740\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 1.791287847477920003294023596864004244492228288383985951303621061953434212773885) <= 0.001);\n  var msgBox = document.getElementById('17408700114163635740_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_17408700114163635740\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_17408700114163635740\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nFind the largest real root of the polynomial $x^3 - x - 17$\n\n::: {.cell execution_count=63}\n\n::: {.cell-output .cell-output-display execution_count=64}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='4343811476779578629' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_4343811476779578629\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"4343811476779578629\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='4343811476779578629_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"4343811476779578629\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 2.700814308977347229335135514877738823809288580656982221477677788801037298240685) <= 0.001);\n  var msgBox = document.getElementById('4343811476779578629_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_4343811476779578629\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_4343811476779578629\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\n[The rule of signs of Descartes](http://en.wikipedia.org/wiki/Descartes_rule_of_signs) is a simple means to give an upper bound on the number of positive real roots a polynomial has. One counts the number of sign changes amongst the polynomials coefficients. Suppose this is $k$, then the number of *positive* real roots (counting multiplicities) is one of $k$, $k-2$, $k-4$, ... . In particular if $k$ is odd, there must be at least one real root.\n\n\nFor example, the polynomial $x^3 -x^2 -x - 1$ has signs `+ - - -`, so there is just one sign change. This implies there must be exactly one *positive* real root, which is identifyied with:\n\n::: {.cell execution_count=64}\n``` {.julia .cell-code}\nf(x) = x^3 -x^2 -x - 1\nN.(sympy.real_roots(f(x)))\n```\n\n::: {.cell-output .cell-output-display execution_count=65}\n```\n1-element Vector{BigFloat}:\n 1.839286755214161132551852564653286600424178746097592246778758639404203222081975\n```\n:::\n:::\n\n\nFor the polynomial $f(x) = x^5 -x + 1$ has potentially 2 *positive*, real roots? Are there $0$ or $2$ positive, real roots?\n\n::: {.cell execution_count=65}\n\n::: {.cell-output .cell-output-display execution_count=66}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='10853487304780431123' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_10853487304780431123\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_10853487304780431123_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_10853487304780431123\"\n              id=\"radio_10853487304780431123_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        zero\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_10853487304780431123_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_10853487304780431123\"\n              id=\"radio_10853487304780431123_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        two\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='10853487304780431123_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_10853487304780431123\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('10853487304780431123_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_10853487304780431123\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_10853487304780431123\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nThe number of possible *negative*, real roots can also be found from Descartes' rule. Instead of looking at the sign changes of $f(x)$, one must look at the sign changes of $g(x) = f(-x)$.\n\n\nIf $f(x) = x^5 - x +1$ we have $g(x) = -x^5 +x + 1$ (just change the signs of the coefficients of the odd powers). Then $g(x)$ has one sign change. This means there is one *negative* real root. What is it?\n\n::: {.cell execution_count=66}\n\n::: {.cell-output .cell-output-display execution_count=67}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='8636397462259039461' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_8636397462259039461\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"8636397462259039461\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='8636397462259039461_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"8636397462259039461\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - -1.1673039782614185) <= 0.01);\n  var msgBox = document.getElementById('8636397462259039461_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_8636397462259039461\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_8636397462259039461\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "zeros_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}