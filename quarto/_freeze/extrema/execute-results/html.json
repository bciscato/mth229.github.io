{
  "hash": "edad081ae7a084cdf6f08db07853fab7",
  "result": {
    "markdown": "# Maximization and minimization with Julia\n\n\n\n## Introduction\n\n\nThis project discusses a basic application of calculus to answer questions of the type: What is the largest value a function can take?\n\n\nFor example,\n\n\n> Of all rectangles with perimeter 20, which has of the largest area?\n\n\n\nThere are a few basic theorems that will help us. First is our \"hunting license\" which tells us there is actually something to find if some assumptions are met:\n\n\n### Extreme value theorem (Bolzano)\n\n\n> A real-valued continuous function $f$ on a closed interval $[a,b]$ will obtain its maximum (minimum) value. That is there exists at least one value $c$ in $[a,b]$ for which $f( c) \\geq f(x)$ ($f( c) \\leq f(x)$) for any $x$ in $[a,b]$.\n\n\n\n### Theorem of Fermat\n\n\nThe above complements a theorem of [Fermat](http://en.wikipedia.org/wiki/Fermat%27s_theorem_(stationary_points) ) which can be expressed as:\n\n\n> Further, the extrema (maxima or minima) can only occur at a *critical point* of $f$ or at the endpoints, $a$ and $b$.\n\n---\n\n\nThough not all of our problems lend themselves to a description of a continuous function on a closed interval, if they do we have an algorithmic prescription to find the absolute extrema of a function:\n\n\n  * Find the critical points. For this we will can use a root-finding algorithm like Newton's method to solve $f'(x) = 0$, as appropriate.\n  * Evaluate the function values at the critical points and at the end points.\n  * Identify the largest and smallest values.\n\n\nWith the computer we can take some shortcuts, as we will be able to graph our function to see where the extreme values will be.\n\n\n## Fixed perimeter and area\n\n\nThe simplest way to investigate the maximum or minimum value of a function over a closed interval is to just graph it and look.\n\n\nWe begin with the question of which rectangles of perimeter 20 have the largest area? The figure shows a few different rectangles with this perimeter and their respective areas.\n\n\n![Rectangles](figures/extrema/extrema-rectangles.png)\n\n\nThe basic mathematical approach is to find a function of a single variable to maximize or minimize. In this case we have two variables describing a rectangle: a base $b$ and height $h$. Our formulas are:\n\n\n\n$$\nP = 20 = 2b + 2h, \\quad A = bh.\n$$\n\n\nWe see that $b$ can be no bigger than 10 and no smaller than 0 from the restriction put in place through the perimeter. Solving for $h$ in terms of $b$ then yields this restatement of the problem:\n\n\nMaximize $A(b) = b \\cdot (10 - b)$ over the interval $[0,10]$.\n\n\nThis is exactly the form needed to apply our theorem about the existence of extrema (a continuous function on a closed interval). Rather than solve analytically by taking a derivative, we simply graph to find the value:\n\n``` {.julia .cell-code}\nusing MTH229\nusing Plots\n```\n\n\n\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nA(b) = b * (10 - b)\nplot(A, 0, 10)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n![](extrema_files/figure-html/cell-5-output-1.svg){}\n:::\n:::\n\n\nYou should see the maximum occurs at $b=5$ by symmetry, so $h=5$ as well, and the maximum area is then $25$. This gives the satisfying answer that among all rectangles of fixed perimeter, that with the largest area is a square.\n\n\nBefore moving on, let's see a slightly different way to do this problem, where we trade off some algebra for a bit of abstraction. Let's first write area as a function of both base and height:\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nA(b, h) = b*h\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nA (generic function with 2 methods)\n```\n:::\n:::\n\n\nThen from the constraint given by the perimeter being a fixed value we can solve for `h` in terms of `b`. We write this as a function:\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nh(b) = (20 - 2b) / 2\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nh (generic function with 1 method)\n```\n:::\n:::\n\n\nThen to get `A(b)` we simply need to substitute `h(b)` into our formula for the area,  `A`. However, instead of doing the substitution ourselves using algebra we let `julia` do it through composition of functions:\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nA(b) = A(b, h(b))\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nA (generic function with 2 methods)\n```\n:::\n:::\n\n\nFrom this we can solve as before. This approach exploits `julia`'s multiple dispatch feature to reduce the need for sometimes unwieldy algebra.\n\n\n### Norman Windows\n\n\nHere is a similar, though more complicated, example where the analytic approach can be a bit more tedious, but the graphical one mostly satisfying, though we do use  the `find_zero` function to find the exact final answer.\n\n\nLet a \"Norman\" window consist of a rectangular window of top length $x$ and side length $y$ and a half circle on top. The goal is to maximize the area for a fixed value of the perimeter. Again, assume this perimeter is 20 units.\n\n\n\n![Norman window](figures/extrema/extrema-norman.png)\n\n\nThen we have two equations.\n\n\nThe area is the area of the rectangle plus the area of the half circle ($\\pi r^2/2$).\n\n\n\n$$\nA = xy + \\pi(x/2)^2/2\n$$\n\n\nIn `julia` this is\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nA(x,y) = x*y + pi*(x/2)^2 / 2\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nA (generic function with 2 methods)\n```\n:::\n:::\n\n\nThe perimeter consists of 3 sides of the rectangle and the perimeter of half a circle ($\\pi r$, with $r=x/2$):\n\n\n\n$$\nP = 2y + x + \\pi(x/2) = 20\n$$\n\n\nWe solve for $y$ in the first with $y = (20 - x - \\pi(x/2))/2$ so that in `julia` we have:\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\ny(x) = (20 - x - pi * x/2) / 2\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\ny (generic function with 1 method)\n```\n:::\n:::\n\n\nAnd then we substitute in `y(x)` for `y` in the area formula through:\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\nA(x) = A(x, y(x))\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nA (generic function with 2 methods)\n```\n:::\n:::\n\n\nOf course both $x$ and $y$ are non-negative. The latter forces $x$ to be no more than $20/(1+\\pi/2)$.\n\n\nThis leaves us the calculus problem of finding an absolute maximum of a continuous function over the closed interval $[0, 20/(1+\\pi/2)]$. Our theorem tells us this maximum must occur, we now proceed to find it.\n\n\nWe begin by simply graphing and estimating the values of the maximum and where it occurs.\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nplot(A, 0, 20/(1+pi/2))\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n![](extrema_files/figure-html/cell-13-output-1.svg){}\n:::\n:::\n\n\nThe naked eye sees that maximum value is somewhere around $27$ and occurs at $x\\approx 5.6$. Clearly from the graph, we know the maximum value happens at the critical point and there is only one such critical point.\n\n\nAs reading the maximum from the graph is more difficult than reading a $0$ of a function, we plot the derivative using our approximate derivative.\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\nplot(A', 5.5, 5.7)     # uses A' notation defined in MTH229\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n![](extrema_files/figure-html/cell-14-output-1.svg){}\n:::\n:::\n\n\nWe confirm that the critical point is around $5.6$.\n\n\n### Using find_zero to locate critical points.\n\n\nRather than zoom in graphically, we now use a root-finding algorithm, to find a more precise value. We know that the maximum will occur at a critical point, a zero of the derivative. Newton's method, for example, can locate the precise values of these zeros. The `find_zero` function from the `Roots` package provides a non-linear root-finding algorithm similar to Newton's method. The only thing to keep track of is that solving $f'(x) = 0$ means we use the derivative and not the original function.\n\n\nOur initial guess will be taken from the graph we made, or $x=5.6$. Here is how we use `find_zero`:\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\nx = find_zero(A', 5.6)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n5.600991535115575\n```\n:::\n:::\n\n\nThe value `x` is the critical point, and in this case gives the position of the value that will maximize the function. This value is sometimes referred to as the *argmax*, or argument which maximizes the function. The value and maximum area is then given by:\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\n(x, A(x))\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n(5.600991535115575, 28.00495767557787)\n```\n:::\n:::\n\n\n(Compare this answer to the previous, is the square the figure of greatest area for a fixed perimeter, or just the figure amongst all rectangles?)\n\n\n### Practice\n\n\n#### Question\n\n\nA rancher with 20 meters of fence, wishes to make a pen adjacent to an existing fence. The pen will be a rectangle with one edge using the existing fence. Say that has length $x$, then $20 = 2y + x$, with $y$ the other dimension of the pen. What is the maximum area that can be made?\n\n::: {.cell execution_count=16}\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='2941832379801739202' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_2941832379801739202\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"2941832379801739202\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='2941832379801739202_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"2941832379801739202\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 50.0) <= 0.001);\n  var msgBox = document.getElementById('2941832379801739202_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_2941832379801739202\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_2941832379801739202\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n## Trigonometry\n\n\nMany maximization and minimization problems involve triangles, which in turn use trigonometry in their description. Here is an example, the \"ladder corner problem.\" (There are many other [ladder problems](http://www.mathematische-basteleien.de/ladder.htm).\n\n\nA ladder is to be moved through a two-dimensional hallway which has a bend and gets narrower after the bend. The hallway is 8 feet wide then 5 feet wide. What is the longest such ladder that can be navigated around the corner? The figure shows a ladder of length $l_1 + l_2$ that got stuck – it was too long.\n\n\n\n![Ladder](figures/extrema/extrema-ladder.png)\n\n\nWe approach this problem in reverse. It is easy to see when a ladder is too long. It gets stuck at some angle $\\theta$. So for each $\\theta$ we find that ladder length that is just too long. Then we find the minimum length of all these ladders that are too long. If a ladder is this length or more it will get stuck for some angle. However, if it is less than this length it will not get stuck. So to maximize a ladder length, we minimize a different function. Neat.\n\n\nNow, to find the length $l = l_1 + l_2$ as a function of $\\theta$.\n\n\nWe need to brush off our trigonometry, in particular right triangle trigonometry. We see from the figure that $l_1$ is the hypotenuse of a right triangle with opposite side $8$ and $l_2$ is the hypotenuse of a right triangle with adjacent side $5$. So, $8/l_1 = \\sin\\theta$ and $5/l_2 = \\cos\\theta$.\n\n\nThat is, we have\n\n::: {.cell execution_count=18}\n``` {.julia .cell-code}\nl(l1, l2) = l1 + l2\nl1(t) = 8/sin(t)\nl2(t) = 5/cos(t)\n##\nl(t) = l(l1(t), l2(t))\t\t# or simply l(t) = 8/sin(t) + 5/cos(t)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nl (generic function with 2 methods)\n```\n:::\n:::\n\n\nOur goal is to minimize this function for all angles between $0$ and $90$ degrees, or $0$ and $\\pi/2$ radians.\n\n\nThis is not a continuous function on a closed interval – it is undefined at the endpoints. That being said, a quick plot will convince us that the minimum occurs at a critical point and there is only one critical point in $(0, \\pi/2)$.\n\n::: {.cell execution_count=19}\n``` {.julia .cell-code}\ndelta = 0.2\nplot(l, delta, pi/2 - delta)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n![](extrema_files/figure-html/cell-20-output-1.svg){}\n:::\n:::\n\n\nThe minimum occurs between 0.5 and 1.0 radians, we will use a bracketing method:\n\n::: {.cell execution_count=20}\n``` {.julia .cell-code}\nx = find_zero(l', (0.5, 1.0))\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n0.8634136052517809\n```\n:::\n:::\n\n\nSo the minimum of the function $l$ is\n\n::: {.cell execution_count=21}\n``` {.julia .cell-code}\nl(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n18.219533699708656\n```\n:::\n:::\n\n\nThat is, any ladder less than this length can get around the hallway.\n\n\n### Practice\n\n\n#### Question\n\n\nRather than use a bracketing method to solve for the root of $l'(t)=0$, we might have tried using `find_zero(l', 0.8)`. Do so. What do you find?\n\n::: {.cell execution_count=22}\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='8936727059037609811' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_8936727059037609811\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_8936727059037609811_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_8936727059037609811\"\n              id=\"radio_8936727059037609811_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        You get the same answer, 0.8634...\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_8936727059037609811_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_8936727059037609811\"\n              id=\"radio_8936727059037609811_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        The method does not converge\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_8936727059037609811_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_8936727059037609811\"\n              id=\"radio_8936727059037609811_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        You get a different answer, 0.9834...\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='8936727059037609811_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_8936727059037609811\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('8936727059037609811_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_8936727059037609811\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_8936727059037609811\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nA rain gutter is constructed from a 30\" wide sheet of tin by bending it into thirds. If the sides are bent 90 degrees, then the cross-sectional area would be $100 = 10^2$. This is not the largest possible amount. For example, if the sides are bent by 45 degrees, the cross sectional area is:\n\n::: {.cell execution_count=23}\n``` {.julia .cell-code}\n2 * (1/2 * 10*cos(pi/4) * 10 * sin(pi/4)) + 10*sin(pi/4) * 10\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n120.71067811865474\n```\n:::\n:::\n\n\nFind a value in degrees that gives the maximum. (The first task is to write the area in terms of $\\theta$.\n\n::: {.cell execution_count=24}\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='3328126448980761486' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_3328126448980761486\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"3328126448980761486\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='3328126448980761486_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"3328126448980761486\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 60.00000000000001) <= 0.001);\n  var msgBox = document.getElementById('3328126448980761486_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_3328126448980761486\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_3328126448980761486\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nA movie screen projects on a wall 20 feet high beginning 10 feet above the floor. What value of $x$ gives the largest angle $\\theta?$ (Thanks https://www.math.ucdavis.edu/~kouba.)\n\n\n![Movie screen](figures/extrema/extrema-movie-screen.gif)\n\n\nWhat is the value of theta in degrees?\n\n::: {.cell execution_count=25}\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='10836784655596503018' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_10836784655596503018\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"10836784655596503018\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='10836784655596503018_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"10836784655596503018\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 30.000000000000004) <= 0.1);\n  var msgBox = document.getElementById('10836784655596503018_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_10836784655596503018\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_10836784655596503018\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n## Rate times time\n\n\nEthan Hunt, a top secret spy, has a mission to chase a bad guy. Here is what we know:\n\n\n  * Ethan likes to run. He can run at 10 miles per hour.\n  * He can drive a car – usually some concept car by BMW – at 30 miles per hour, but only on the road.\n\n\nFor his mission, he needs to go 10 miles west and 5 miles north. He can do this by:\n\n\n  * just driving 10 miles west then 5 miles north, or\n  * just running the diagonal distance, or\n  * driving $0 < x < 10$ miles west, then running on the diagonal\n\n\nA quick analysis says:\n\n\n  * It would take $(10+5)/30$ hours to just drive\n  * It would take $\\sqrt{10^2 + 5^2}/10$ hours to just run\n\n\nNow, if he drives $x$ miles west ($0 < x < 10$) he would run an amount given by the hypotenuse of a triangle with lengths $5$ and $10-x$. His time driving would be $x/30$ and his time running would be $\\sqrt{5^2 + (10-x)^2}/10$ for a total of:\n\n\n$$\nT(x) = x/30 + \\sqrt{5^2 + (10-x)^2}/10, \\quad 0 < x < 10\n$$\n\n\nWith the endpoints given by $T(0) = \\sqrt{10^2 + 5^2}/10$ and $T(10) = (10 + 5)/30$.\n\n\nLet's plot $T(x)$ over the interval $(0,10)$ and look:\n\n::: {.cell execution_count=26}\n``` {.julia .cell-code}\nT(x) = x/30 + sqrt(5^2 + (10-x)^2)/10\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\nT (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.julia .cell-code}\nplot(T, 0, 10)\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n![](extrema_files/figure-html/cell-28-output-1.svg){}\n:::\n:::\n\n\nThe minimum happens way out near 8. We zoom in a bit:\n\n::: {.cell execution_count=28}\n``` {.julia .cell-code}\nplot(T, 7, 9)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n![](extrema_files/figure-html/cell-29-output-1.svg){}\n:::\n:::\n\n\nIt appears to be around 8.3. We now use `find_zero` to refine our guess at the critical point using a bracketing algorithm:\n\n::: {.cell execution_count=29}\n``` {.julia .cell-code}\nx = find_zero(T', (7, 9))\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n8.232233047033631\n```\n:::\n:::\n\n\nOkay, got it. Around 8.23. So is  our minimum time\n\n::: {.cell execution_count=30}\n``` {.julia .cell-code}\nT(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n0.804737854124365\n```\n:::\n:::\n\n\n(Hint: what is the title of this section?)\n\n\n### Practice\n\n\n#### Questions\n\n\nA maximum likelihood estimator is a value derived by maximizing a function. For example, if\n\n::: {.cell execution_count=31}\n``` {.julia .cell-code}\nL(t) = t^3 * exp(-3t) * exp(-2t) * exp(-4t) ## 0 <= t <= 10\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\nL (generic function with 1 method)\n```\n:::\n:::\n\n\nThen $L(t)$ is continuous and has single peak, so the maximum occurs at the lone critical point. It turns out that this problem is bit sensitive to an initial condition, so we bracket\n\n::: {.cell execution_count=32}\n``` {.julia .cell-code}\nx = find_zero(L',  (0.1, 0.5))\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n0.3333333333333333\n```\n:::\n:::\n\n\nNow if $L(t) = \\exp(-3t) \\cdot \\exp(-2t) \\cdot \\exp(-4t), \\quad 0 \\leq t \\leq 10$, explain why the same approach won't work:\n\n::: {.cell execution_count=33}\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='4560569107229257020' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_4560569107229257020\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_4560569107229257020_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_4560569107229257020\"\n              id=\"radio_4560569107229257020_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        L&#40;t&#41; takes its maximum at a boundary point – not a critical point\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_4560569107229257020_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_4560569107229257020\"\n              id=\"radio_4560569107229257020_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        L&#40;t&#41; is not continuous on 0 to 10\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_4560569107229257020_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_4560569107229257020\"\n              id=\"radio_4560569107229257020_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        It does work and the answer is x &#61; 2.27...\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='4560569107229257020_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_4560569107229257020\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('4560569107229257020_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_4560569107229257020\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_4560569107229257020\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n## Unbounded domains\n\n\nMaximize the function $xe^{-(1/2) x^2}$ over the interval $[0, \\infty)$.\n\n\nHere the extreme value theorem doesn't technically apply, as we don't have a closed interval. However, if we can eliminate the endpoints as candidates, then we should be able to convince ourselves the maximum must occur at a critical point of $f(x)$. (If not, then convince your self for all sufficiently large $M$ the maximum over $[0,M]$ occurs at a critical point, not an endpoint. Then let $M$ go to infinity.)\n\n\nSo to approach this problem we first graph it over a wide interval.\n\n::: {.cell execution_count=34}\n``` {.julia .cell-code}\nf(x) = x * exp(-x^2)\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\nf (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {.cell execution_count=35}\n``` {.julia .cell-code}\nplot(f, 0, 100)\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n![](extrema_files/figure-html/cell-36-output-1.svg){}\n:::\n:::\n\n\nClearly the action is nearer to 1 than 100. We try graphing the derivative near that area:\n\n::: {.cell execution_count=36}\n``` {.julia .cell-code}\nplot(f', 0, 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n![](extrema_files/figure-html/cell-37-output-1.svg){}\n:::\n:::\n\n\nThis shows the value near $0.7$. We use `find_zero` starting there:\n\n::: {.cell execution_count=37}\n``` {.julia .cell-code}\nx = find_zero(f', 0.7)\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n0.7071067811865476\n```\n:::\n:::\n\n\nThe convergence is quick. The maximum is at\n\n::: {.cell execution_count=38}\n``` {.julia .cell-code}\nf(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n0.42888194248035333\n```\n:::\n:::\n\n\n### Minimize surface area of a can\n\n\nFor a more applied problem of this type (infinite domain), consider a can of some soft drink that is to contain 355ml which is 355 cubic centimeters.  (We use metric units, as the relationship between volume (cubic centimeters) and fluid amount (ml) is clear.)  A can to hold this amount is produced in the shape of cylinder with radius $r$ and height $h$. The materials involved give the surface area, which would be:\n\n\n\n$$\nSA = h \\cdot 2\\pi r + 2 \\cdot \\pi r^2\n$$\n\n\nThe volume satisfies:\n\n\n\n$$\nV = 355 = h \\cdot \\pi r^2\n$$\n\n\nFind the values of $r$ and $h$ which minimize the surface area.\n\n\nFirst the surface area in both variables is given by\n\n::: {.cell execution_count=39}\n``` {.julia .cell-code}\nSA(h, r) = h * 2pi * r + 2pi * r^2\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\nSA (generic function with 1 method)\n```\n:::\n:::\n\n\nAnd solving from the constraint on the volume for `h` in terms of `r` we have\n\n::: {.cell execution_count=40}\n``` {.julia .cell-code}\nh(r) = 355 / (pi * r^2)\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\nh (generic function with 1 method)\n```\n:::\n:::\n\n\nAnd composing gives us a function of `r` alone:\n\n::: {.cell execution_count=41}\n``` {.julia .cell-code}\nSA(r) = SA(h(r), r)\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\nSA (generic function with 2 methods)\n```\n:::\n:::\n\n\nThis we minimize subject to the constraint that $r \\geq 0$. A quick glance shows that as $r$ gets close to $0$, the can must get infinitely tall to contain that fixed volume, and would have infinite surface area as the $1/r^2$ in the first term implies. On the other hand, as $r$ goes to infinity, the height must go to 0 to make a really flat can. Again, we would have infinite surface area, as the $r^2$ term at the end indicates. With this observation, we can rule out the endpoints as possible minima, so any minima must occur at a critical point.\n\n\nWe start by making a graph, making an educated guess that the answer is somewhere near a real life answer, or around 3-5 cms in radius:\n\n::: {.cell execution_count=42}\n``` {.julia .cell-code}\nplot(SA, 2, 10)\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n![](extrema_files/figure-html/cell-43-output-1.svg){}\n:::\n:::\n\n\nThe minimum looks to be around 4cm. We can use `find_zero` to zero in on the answer:\n\n::: {.cell execution_count=43}\n``` {.julia .cell-code}\nr0 = find_zero(SA', 4)\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\n3.8372152480156734\n```\n:::\n:::\n\n\nOkay, $3.837...$ is our computation for $r$. To get $h$, we use:\n\n::: {.cell execution_count=44}\n``` {.julia .cell-code}\nh(r0)\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\n7.674430496031345\n```\n:::\n:::\n\n\nThis produces a can which is about square in profile. This is not how most cans look though. Perhaps our model is too simple, or the cans are optimized for some other purpose than minimizing materials.\n\n\n### Practice\n\n\n#### Questions\n\n\nMinimize the function $f(x) = 2x + 3/x$ over $(0, \\infty)$.\n\n::: {.cell execution_count=45}\n\n::: {.cell-output .cell-output-display execution_count=46}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='17289822499473169364' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_17289822499473169364\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"17289822499473169364\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='17289822499473169364_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"17289822499473169364\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 1.2247448713915892) <= 0.001);\n  var msgBox = document.getElementById('17289822499473169364_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_17289822499473169364\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_17289822499473169364\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nOf all rectangles of area 4, find the one with smallest perimeter. What is the perimeter?\n\n::: {.cell execution_count=46}\n\n::: {.cell-output .cell-output-display execution_count=47}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='16043518352243139985' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_16043518352243139985\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"16043518352243139985\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='16043518352243139985_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"16043518352243139985\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 8.0) <= 0.001);\n  var msgBox = document.getElementById('16043518352243139985_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_16043518352243139985\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_16043518352243139985\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n## Implicit derivates\n\n\nMany problems are best done with implicit derivatives. A video showing such a problem along with how to do it analytically is [here](http://ocw.mit.edu/courses/mathematics/18-01sc-single-variable-calculus-fall-2010/unit-2-applications-of-differentiation/part-b-optimization-related-rates-and-newtons-method/session-32-ring-on-a-string/).\n\n\nThis video starts with a simple question:\n\n\n> If you have a rope and heavy ring, where will the ring position itself due to gravity?\n\n\n\nWell, suppose you hold the rope in two places, which we can take to be $(0,0)$ and $(a,b)$. Then let $(x,y)$ be all the possible positions of the ring that hold the rope taught. Then we have this picture:\n\n\n\n![String](figures/extrema/extrema-ring-string.png)\n\n\nSince the length of the rope does not change, we must have for any admissible $(x,y)$ that:\n\n\n\n$$\nL = \\sqrt{x^2 + y^2} + \\sqrt{(a-x)^2 + (b-y)^2},\n$$\n\n\nwhere these are the two hypotenuses in the figure, as computed through Pythagorean's theorem.\n\n\n> If we assume that the ring will minimize the value of y subject to this constraint, can we solve for y?\n\n\n\nWell, with implicit differentiation you would regard $y=y(x)$, implicitly differentiate and find the critical point of $y$. Though messy to solve, the video shows a fundamental relationship which is a restatement of the reflection properties of ellipses.\n\n\nHere we show how we can do this numerically with `julia`.  We don't really have an easy way to work with implicit functions in `julia`, so we have some work to do to find an explicit function.\n\n\nFirst, lets assume $a=1$ and $L=10$ ($L$ must be at least $\\sqrt{1 + b^2}$) , then we have:\n\n::: {.cell execution_count=48}\n``` {.julia .cell-code}\na = 1; Len = 10\nf(x, y, a, b) = sqrt(x^2 + y^2) + sqrt((a-x)^2 + (b-y)^2)\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\nf (generic function with 2 methods)\n```\n:::\n:::\n\n\nNow we solve for a value of $b$, say $b=1$. You could choose other values for $b$, as long as $L$ is long enough.\n\n::: {.cell execution_count=49}\n``` {.julia .cell-code}\nb = 1;\t\t\t\t ## some arbitrary choice for b\nf(x, y) = f(x, y, a, b)\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\nf (generic function with 3 methods)\n```\n:::\n:::\n\n\nOur values $(x,y)$ must satisfy $f(x,y) = L$ so for a fixed $x$, $y$ must be a zero of the function:\n\n\n\n$$\nh(y) = f(x, y) - L = 0\n$$\n\n\nThat is, if we start with $x$ and solve this equation for $y$ the resulting value $(x,y)$ will be on the curve. Call this function $g$. We can define it with:\n\n::: {.cell execution_count=50}\n``` {.julia .cell-code}\nfunction g(x)\n   h(y) = f(x, y) - Len\n   find_zero(h, zero(x))  # not 0, but zero(x) to get type right\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\ng (generic function with 1 method)\n```\n:::\n:::\n\n\nLet's see if it worked. For $x=0.4$ we get that $y$ is\n\n::: {.cell execution_count=51}\n``` {.julia .cell-code}\ng(0.4)\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\n-4.4746883945649625\n```\n:::\n:::\n\n\nAnd furthermore, we have\n\n::: {.cell execution_count=52}\n``` {.julia .cell-code}\nf(.4, g(0.4))\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\n10.0\n```\n:::\n:::\n\n\nThat this is $L$,  should be the case for any choice of $x$ when we have convergence for $g$. Try it yourself with a different value in $[0,1]$.\n\n\nNow, through this inversion trick, we have a function $y=g(x)$. We graph to see that indeed this function will have a minimum value:\n\n::: {.cell execution_count=53}\n``` {.julia .cell-code}\nplot(g, 0.2, 0.8)\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n![](extrema_files/figure-html/cell-54-output-1.svg){}\n:::\n:::\n\n\n(The implicit function theorem will tell us that locally for any $x$ we can find a function to return $y$ provided a certain derivative is not $0$ and the equation is reasonably behaved.)\n\n\nOkay, now to find the lowest point. This is what we minimize to find the resting position of the ring. Again, we turn to `find_zero`, but for minimization we use the first derivative, as we are finding critical points.\n\n::: {.cell execution_count=54}\n``` {.julia .cell-code}\nx = find_zero(g', (0.3, 0.6))\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```\n0.44974810923703934\n```\n:::\n:::\n\n\n(The above only works due to how we defined `g` using `zero(x)` and *not* `0` for technical reasons related to automatic differentiation.)\n\n\nThe point where the ring rests is:\n\n::: {.cell execution_count=55}\n``` {.julia .cell-code}\nx, g(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```\n(0.44974810923703934, -4.4749371855331)\n```\n:::\n:::\n\n\nIf you watch the video linked to above, you will see that the surprising fact here is the resting point is such that the angles formed by the rope are the same. Basically this makes the tension in both parts of the rope equal, so there is a static position (if not static, the ring would move and not end in the final position). We can verify this fact numerically by showing the arctangents of the two triangles are the same:\n\n::: {.cell execution_count=56}\n``` {.julia .cell-code}\nt = g(x)\natan(abs(t)/x) - atan((b-t)/(a-x))\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```\n0.0\n```\n:::\n:::\n\n\nNow, were we lucky and just happened to take $b = 1$ in such a way to make this work? Well, no. But convince yourself by doing the above for different values of $b$.\n\n",
    "supporting": [
      "extrema_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}