{
  "hash": "dab5f82df7258bfd92c38ba0d6532633",
  "result": {
    "markdown": "# Graphing functions with Julia\n\n\n\n<br/>\nA notebook for this material:\n[ipynb](https://raw.githubusercontent.com/mth229/229-projects/master/03-graphics.ipynb)\n[(Pluto html)](./229-projects/03-graphics.html)\n[(With commentary)](./229-projects/03-graphics-pluto-commentary.html)\n\n\n## Introduction\n\n\nThe `Julia` language is a new language and as such, certain design decisions are still being made. One key decision is the interface for creating graphics. At this point there are many different ones (`Makie`, `PyPlot`, plotly, plotlyjs, `GR`, `Winston`, `Gadfly`, `Gaston`,...), and perhaps more will be generated before a dominant one is arrived at. As such, we don't try to teach the details of any one of them.\n\n\nCurrently, the  the `Plots` package  provides a unified interface to many backend plotting packages.  We will use the `Plots` package in these examples.\n\n\nFor the impatient, this is all that is needed to know to get up and running.\n\n``` {.julia .cell-code}\nusing MTH229\nusing Plots\n```\n\n\n\n\nThen, graphing a function is as easy as specifying the function and the domain to graph over, e.g.:\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nf(x) = exp(-x^2/2)\nplot(f, -3, 3) \t\t\t# plot f over [-3,3]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n![](graphing_files/figure-html/cell-5-output-1.svg){}\n:::\n:::\n\n\n:::{.callout-note}\n## plotly\n\nThe default graphics of `Plots` are *static*. Adding one additional\ncall, `plotly()`. will use an interactive backend for `Plots` which\nwill show the ``(x,y)`` position of points on the graph when a mouse\nhovers over them. (The default can be re-loaded by the command:\n`gr()`.)\n\n:::\n\n\nGraphs can be layered by using the `plot!` function (with an exclamation point indicating a current graph is begin modified):\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nf(x) = cos(x)\ng(x) = 1 - x^2/2\nplot(f, -pi/2, pi/2)\nplot!(g)        #  the domain to plot is optional if adding a layer\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n![](graphing_files/figure-html/cell-6-output-1.svg){}\n:::\n:::\n\n\nFor the more patient, the rest of the sections cover some additional details including how to specify a graph by defining the points that are used to make the plot.\n\n\n## The plot function\n\n\nThe most basic usage for plotting a function follows this pattern:\n\n``` {.julia .cell-code}\nplot(function_object, from, to)     # or plot(f, a, b)\n```\n\n\nas in\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nplot(sin, 0, 2pi)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n![](graphing_files/figure-html/cell-8-output-1.svg){}\n:::\n:::\n\n\nThat creates the graphic. The `Plots` package is an interface to several plotting \"backends.\" Within `IJulia` and using `plotly()` the graph will be automatically displayed as an `SVG` graphic that allows you to zoom and pan with the mouse.\n\n\n:::{.callout-note}\n## Alert\nThis is another example of a general template **action(function_object, args...)** for performing some action on a function. In this case, the action is to plot a function and the additional *args...* indicate the domain to plot over.)\n\n:::\n\nAgain, we plot a function, this time a basic polynomial:\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\nf(x) = x^2 - 2x + 2\nplot(f, -3, 3)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n![](graphing_files/figure-html/cell-9-output-1.svg){}\n:::\n:::\n\n\n### Adding layers using \"plot!\"\n\n\nA graph can have layers added to it using `plot!` or other such functions. For example, adding the function `zero` will emphasize the `x` axis:\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nf(x) = x^2 - 2x + 2\nplot(f, -3, 3)\nplot!(zero)     # x axis\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n![](graphing_files/figure-html/cell-10-output-1.svg){}\n:::\n:::\n\n\nThe automatic legend can be supressed by passing the argument `legend=false` to the initial `plot` command.\n\n\nAdding points can be done with the `scatter!` command. We put the `x` and `y` values into containers defined by `[]`. For example, the polynomial $x^2 - 3x +2$ has roots at $2$ and $1$, we emphasize this through:\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\nf(x) = x^2 - 3x + 2\nrts = [1, 2]\nplot(f, 0, 3)\nscatter!(rts, [0, 0])\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n![](graphing_files/figure-html/cell-11-output-1.svg){}\n:::\n:::\n\n\n### Inf, NaN values\n\n\n`Plots` plots functions by creating a large number of paired points $(x, f(x))$; it then plots these points; and, finally, connects the points with line segments. In the numerous function evaluations, it is of course quite possible that some of the points will return `Inf` or `NaN`. (Where `Inf` is a floating point value for infinity and results from evaluations like `1/0` and `NaN` stands for \"not a number\", and results from indeterminate evaluations such as `0/0`.)\n\n\nThe values which are `Inf` can not reasonably be plotted. Values which are `NaN` can not reasonably plotted. What to do? Such points are simply not plotted, and no line segments are drawn causing the plot to be discontinuous. This convention can be utilized to good effect.\n\n\nFor example, to create bounded graphs, we can trim out any large values and replace them with `NaN`. A function that can be used to modify an arbitrary function (like $f(x) = 1/x$) and return a function that can be plotted can be defined as follows:\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\ntrim(f; val=10) = x -> abs(f(x)) > val ? NaN : f(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\ntrim (generic function with 1 method)\n```\n:::\n:::\n\n\nThis action is very similar to  [clamping](http://en.wikipedia.org/wiki/Clamping_(graphics)).\n\n\nThe `MTH229` package implements this in the function `rangeclamp(f, hi=20, lo=-hi)`. (Base `julia` has a `clamp` function.)\n\n\nUsing `rangeclamp` is fairly simple. The output is a function, so can be passed directly to the `plot` call:\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nf(x) = 1/x\nplot(rangeclamp(f), -3, 3)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n![](graphing_files/figure-html/cell-13-output-1.svg){}\n:::\n:::\n\n\nOr\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\nplot(rangeclamp(f, 100), -3, 3)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n![](graphing_files/figure-html/cell-14-output-1.svg){}\n:::\n:::\n\n\nThis trimming also works when `Inf` and `-Inf` values are encountered, as both can be ordered by `>`.\n\n\n### Plotting with anonymous functions\n\n\nConsider a function with a parameter, `theta`, defined by:\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\nfunction g(x; theta=pi/4)\n\t a = 200*cos(theta)\n\t tan(theta)*x + (32/a)*x - 32*log(a/(a-x))\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\ng (generic function with 1 method)\n```\n:::\n:::\n\n\nPlotting `g` will use the default value of $\\pi/4$. To plot with a different value, say $\\pi/3$ we can create a new function:\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\nf(x) = g(x, theta=pi/3)\nplot(f, 0, 100)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n![](graphing_files/figure-html/cell-16-output-1.svg){}\n:::\n:::\n\n\nWhich works, but is a bit verbose. It would be more convenient to use an anonymous function, to bypass the creation of a throwaway function:\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\nplot(x -> g(x, theta=pi/3), 0, 100)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n![](graphing_files/figure-html/cell-17-output-1.svg){}\n:::\n:::\n\n\nThere are many instances where plotting with anonymous functions are convenient. It can be hard to get used to seeing that arrow, but it can simplify many expressions if used properly.\n\n\n### Practice\n\n\n#### Question\n\n\nPlot the function $f(x) = x^3 - x$ over $[-2,2]$. How many zeros are there?\n\n::: {.cell execution_count=17}\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='2351091482698625929' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_2351091482698625929\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"2351091482698625929\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='2351091482698625929_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"2351091482698625929\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 3) <= 1.0e-16);\n  var msgBox = document.getElementById('2351091482698625929_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_2351091482698625929\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_2351091482698625929\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nPlot the function $f(x) = x^3 - x$. When is the function positive?\n\n::: {.cell execution_count=18}\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='2623513052540162030' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_2623513052540162030\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_2623513052540162030_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_2623513052540162030\"\n              id=\"radio_2623513052540162030_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>&#40;-1, 0&#41;</code> and <code>&#40;1, Inf&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_2623513052540162030_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_2623513052540162030\"\n              id=\"radio_2623513052540162030_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>&#40;-Inf, -1&#41;</code> and <code>&#40;0,1&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_2623513052540162030_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_2623513052540162030\"\n              id=\"radio_2623513052540162030_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>&#40;-Inf, -0.577&#41;</code> and <code>&#40;0.577, Inf&#41;</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='2623513052540162030_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_2623513052540162030\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('2623513052540162030_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_2623513052540162030\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_2623513052540162030\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nPlot the function $f(x) = 3x^4 + 8x^3 - 18x^2$. Where (what $x$ value) is the smallest value? (That is, for which input $x$ is the output :f(x) as small as possible.\n\n::: {.cell execution_count=19}\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='3737470090547406393' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_3737470090547406393\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"3737470090547406393\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='3737470090547406393_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"3737470090547406393\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - -3) <= 0.25);\n  var msgBox = document.getElementById('3737470090547406393_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_3737470090547406393\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_3737470090547406393\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nPlot the function $f(x) = 3x^4 + 8x^3 - 18x^2$. What is the smallest value?\n\n::: {.cell execution_count=20}\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='11809318305528605392' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_11809318305528605392\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"11809318305528605392\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='11809318305528605392_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"11809318305528605392\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - -135) <= 10);\n  var msgBox = document.getElementById('11809318305528605392_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_11809318305528605392\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_11809318305528605392\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nPlot the function $f(x) = 3x^4 + 8x^3 - 18x^2$. When is the function increasing?\n\n::: {.cell execution_count=21}\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='6333175603799598929' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_6333175603799598929\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_6333175603799598929_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_6333175603799598929\"\n              id=\"radio_6333175603799598929_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>&#40;-Inf, -4.1&#41;</code> and <code>&#40;1.455, Inf&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_6333175603799598929_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_6333175603799598929\"\n              id=\"radio_6333175603799598929_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>&#40;-Inf, -3&#41;</code> and <code>&#40;0, 1&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_6333175603799598929_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_6333175603799598929\"\n              id=\"radio_6333175603799598929_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>&#40;-3, 0&#41;</code> and <code>&#40;1, Inf&#41;</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='6333175603799598929_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_6333175603799598929\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('6333175603799598929_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_6333175603799598929\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_6333175603799598929\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n## Asymptotes\n\n\nA rational function is nothing more than a ratio of polynomial functions, say $f(x) = p(x)/q(x)$. One interesting thing about such function is there can be asymptotes. These can be vertical (which can happen when $q(x)=0$), horizontal (as $x$ gets large or small), or even slanted.\n\n\nThe vertical asymptotes require care when plotting, as the naive style of plotting where a collection of points is connected by straight lines can render poor graphs when the scale of $y$ values get too large. The really large values plotted near the asymptote can wipe out the possibility of seeing other features of interest in a graph.\n\n\nSome features of interest for a graph that are identifiable by calculus concepts are:\n\n\n  * zeroes\n  * vertical asymptotes\n  * horizontal asymptotes (or even slant ones)\n  * relative maximum and minimum\n  * increasing and decreasing parts\n  * changes in inflection\n\n\nFor example, if you want to find zeroes of a function, you really want to look at areas of the graph where the $y$ values are close to $0$. However, if you have a vertical asymptote on the same graph, the $y$ values might also be asked to show very large or small values. With only a finite number of pixels available, it is impossible to easily do both.\n\n\nWhat to do? If you were on a smartphone, you might be tempted to pan around to avoid the asymptotes, then pinch and zoom narrow the graph to the feature of interest.  With `julia` you basically do the same thing, though panning and zooming is done by changing the domain of the $x$ values used in plotting.\n\n\nLet's look at the function $f(x) = 1/x$, which has an obvious vertical asymptote at $0$.\n\n\nOne can try a simple plot:\n\n::: {.cell execution_count=22}\n``` {.julia .cell-code}\nplot(x -> 1/x, -3, 3)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n![](graphing_files/figure-html/cell-23-output-1.svg){}\n:::\n:::\n\n\nThe issue at $0$ is avoided, as the points chosen by `Plots` do not include $0$. The asymptote appears as a strongly slanted line, as individual points are simply connected in a dot-to-dot manner.\n\n\nDoing better without much work is done by simply restricting the part that is plotted. (Alternatively, you can use `NaN` values or multiple functions on one.) For this example, we can easily draw the positive part:\n\n::: {.cell execution_count=23}\n``` {.julia .cell-code}\nplot(x -> 1/x, 0, 3)\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n![](graphing_files/figure-html/cell-24-output-1.svg){}\n:::\n:::\n\n\nIt is best to avoid the asymptote at $0$ completely by backing away by enough to avoid the large range on the $y$ axis. In this case, starting around $1/10$ is reasonable:\n\n::: {.cell execution_count=24}\n``` {.julia .cell-code}\nplot(x -> 1/x, 1/10,  3)\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n![](graphing_files/figure-html/cell-25-output-1.svg){}\n:::\n:::\n\n\nLet's look at the rational function\n\n\n\n$$\nf(x) = \\frac{(x-2)(x-3)}{x-1}\n$$\n\n\nThis will have a vertical asymptote at $1$, zeros at $2$ and $3$ and a slant asymptote. A quick graph from $-10$ to $10$ shows just some of this:\n\n::: {.cell execution_count=25}\n``` {.julia .cell-code}\nf(x) = (x-2)*(x-3)/(x-1)\nplot(f, -10, 10)\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n![](graphing_files/figure-html/cell-26-output-1.svg){}\n:::\n:::\n\n\nWe can see the slant asymptote and the vertical asymptote, but have no chance of seeing the zeros or the local extrema. For that, we can restrict the domain to plot over.\n\n\nFor example, to graph to the right of the asymptote can be done with:\n\n::: {.cell execution_count=26}\n``` {.julia .cell-code}\nplot(f, 1 + 0.5, 4)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n![](graphing_files/figure-html/cell-27-output-1.svg){}\n:::\n:::\n\n\nThis shows the two zeros and gives an idea of the relative minimum. Similarly, a plot of the left of the asymptote can be illustrative. Here we step back by a bit:\n\n::: {.cell execution_count=27}\n``` {.julia .cell-code}\nplot(f, -3, 1 - 0.1)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n![](graphing_files/figure-html/cell-28-output-1.svg){}\n:::\n:::\n\n\nIt appears that the relative maximum occurs between $-1$ and $0$.\n\n\nHere we see what happens to the asymptote. The scale of the $y$ values is huge.  We added a small amount to the left endpoint in case the function is not defined there, but this function takes the reciprocal of a small amount and makes it huge.  Clearly we need to really avoid the issue. It isn't hard ‚Äì just add a little bit more to $0$.\n\n\nOne solution to avoiding this issue is to use the `rangeclamp` function that was previously described. This just caps off really large values so that the vertical asymptotes don't affect the scale of the graph. We can see the asymptotes pretty clearly with:\n\n::: {.cell execution_count=28}\n``` {.julia .cell-code}\nplot(rangeclamp(f), -10, 10)\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n![](graphing_files/figure-html/cell-29-output-1.svg){}\n:::\n:::\n\n\n##### Example Trigonometric functions\n\n\nLet\n\n\n\n$$\nf(x) = \\frac{5}{\\cos x} + \\frac{10}{\\sin x}.\n$$\n\n\nEstimate graphically the minimum value over $(0, \\pi/2)$.\n\n\nThe domain comes from the fact that $\\sin(0) = 0$ and $\\cos(\\pi/2) = 0$, so we will have asymptotes at each. A simple graph shows there are issues:\n\n::: {.cell execution_count=29}\n``` {.julia .cell-code}\nf(x) = 5/cos(x) + 10/sin(x)\nplot(f, 0, pi/2)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n![](graphing_files/figure-html/cell-30-output-1.svg){}\n:::\n:::\n\n\nAs typical with vertical asymptotes, we can't see finer features of the graph when the asymptotes are drawn. To remedy, we again back off from the boundaries. Since $\\sin(x)$ behaves like $x$ near $0$, we pick `delta = 0.3` again and expect a max near $10/(3/10) \\approx 33$.\n\n::: {.cell execution_count=30}\n``` {.julia .cell-code}\ndelta = 0.3;\nplot(f, 0 + delta, pi/2 - delta)\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n![](graphing_files/figure-html/cell-31-output-1.svg){}\n:::\n:::\n\n\nWith this, we see the minimum value is near $y=20$ and occurs around $0.9$.\n\n\n### Practice\n\n\n#### Question\n\n\nThe function $f(x) = (x^3 - 2x) / (2x^2 -10)$ is a rational function with issues when $2x^2 = 10$, or $x = -\\sqrt{5}$ or $\\sqrt{5}$.\n\n\nPlot this function from $-5$ to $5$. How many times does it cross the $x$ axis?\n\n::: {.cell execution_count=31}\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='9225521251182811054' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_9225521251182811054\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"9225521251182811054\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='9225521251182811054_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"9225521251182811054\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 3) <= 0.2);\n  var msgBox = document.getElementById('9225521251182811054_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_9225521251182811054\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_9225521251182811054\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nThe function $f(x) = (x^3 - 2x) / (2x^2 -10)$ has a slant asymptote. One can find the slope of this line using algebra, but if you prefer the computer, you can graph. Define both\n\n::: {.cell execution_count=32}\n``` {.julia .cell-code}\nf(x) = (x^3 - 2x) / (2x^2 -10)\ng(x) = abs(x) > 5 ? f(x) : NaN\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\ng (generic function with 1 method)\n```\n:::\n:::\n\n\nthen plot `g` over $[-20, 20]$. Using algebra or this graph, estimate the slope?\n\n::: {.cell execution_count=33}\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='8972875480048376782' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_8972875480048376782\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"8972875480048376782\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='8972875480048376782_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"8972875480048376782\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 0.5) <= 0.5);\n  var msgBox = document.getElementById('8972875480048376782_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_8972875480048376782\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_8972875480048376782\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nThe rational function $f(x) = (x^2 - 3x - 2) / (x^2 - 4)$ has issues at $-2$ and $2$. How many times does its graph cross the $x$ axis?\n\n::: {.cell execution_count=34}\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='7599543177117697874' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_7599543177117697874\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"7599543177117697874\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='7599543177117697874_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"7599543177117697874\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 2) <= 1.0e-16);\n  var msgBox = document.getElementById('7599543177117697874_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_7599543177117697874\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_7599543177117697874\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n## Arrays\n\n\nWhen we learn how to make a graph using paper and pencil, the \"T\" method is employed, so called as we draw a \"T\" and fill in values to plot for $x$ and $y$.\n\n\nFor example, a chalkboard after the instructor shows how to plot $f(x) = x^2$ might have this drawn on it:\n\n``` {.julia .cell-code}\nx |  y\n------\n1 |  1\n2 |  4\n3 |  9\n4 | 16\n```\n\n\nAs these are the steps done to create the ordered pairs for a plot, we would like to be able to mimic the following procedures used above in `julia`:\n\n\n  * choose a collection of $x$ values\n  * create the corresponding $y$ values\n  * plot the pairs $(x,y)$ and connect with lines\n\n\nWe have seen how variables can be used to refer to a single value, but we want to refer to more than one value now. A container for holding such is an `Array`. Arrays are implemented in most all computer languages, though the term can mean different things.  We are looking for vectors, or one-dimensional arrays.  In general, an array is a multidimensional grid of values ‚Äì all of the same type (integer, floating point, *functions*, ..., or ANY).\n\n\nFor our purposes, we want vectors (one dimensional, $n$ by 1 arrays in `julia`). These can be easily constructed in different ways.\n\n\n### Creating 1-dimensional arrays with `[]`\n\n\nIn many different contexts, `julia` uses `[]` to create collections from individual components.\n\n\nFor example, to directly create a 1-dimensional array with the `[]` syntax one simply types in the values separated by commas:\n\n::: {.cell execution_count=36}\n``` {.julia .cell-code}\n[1, 2, 3, 4, 5]\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\n5-element Vector{Int64}:\n 1\n 2\n 3\n 4\n 5\n```\n:::\n:::\n\n\nOr\n\n::: {.cell execution_count=37}\n``` {.julia .cell-code}\n[1, 1, 2, 3, 5, 8]\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n6-element Vector{Int64}:\n 1\n 1\n 2\n 3\n 5\n 8\n```\n:::\n:::\n\n\nThese create \"vectors.\"  Row vectors (which are arrays, but not of type `Vector`) are created when no commas are specified:\n\n::: {.cell execution_count=38}\n``` {.julia .cell-code}\n[13 21 34 55]\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\n1√ó4 Matrix{Int64}:\n 13  21  34  55\n```\n:::\n:::\n\n\nThe notation is that `[a, b, c]` combines `a`, `b`, and `c` vertically and `[a b c]` combines them horizontally. The former is good to make column vectors for single values (scalars).\n\n\nRow and column vectors are different! We will primarily use column vectors going forward.\n\n\n**Containers are for like values...**\n\n\nIn general, `julia` uses `[` and `]` to create containers for like values. These containers can be more complicated than a single row or column. One subtle thing is that each object must be of the same value, though sometimes this happens by a silent conversion. So, mixing integer and floating point numbers will produce a container of just floating point values:\n\n::: {.cell execution_count=39}\n``` {.julia .cell-code}\n[1, 2.0]\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n2-element Vector{Float64}:\n 1.0\n 2.0\n```\n:::\n:::\n\n\n### Creating arithmetic sequences\n\n\nA basic set of numbers used in programming are the values `1`,`2`, ..., `n`. These are the simplest example of an *arithmetic progression* or sequence, which in general can start in a different place and have steps of a size different from $1$:\n\n\n\n$$\na, a + h, a+2h, a+3h, ..., a + nh\n$$\n\n\nIt should be possible to specify arithmetic sequences either by\n\n\n  * the start and end points and the number of points employed\n  * the start and end points and step size.\n\n\nIn `julia` the `range` function will do the former and the range operator the latter.\n\n\nHere are 5 evenly spaced numbers from $0$ to $\\pi/2$ given by `range`\n\n::: {.cell execution_count=40}\n``` {.julia .cell-code}\nrange(0, pi/2, length=5)\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n0.0:0.39269908169872414:1.5707963267948966\n```\n:::\n:::\n\n\nThe values are not displayed, but will be if `collect`ed:\n\n::: {.cell execution_count=41}\n``` {.julia .cell-code}\ncollect(range(0, pi/2, length=5))\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\n5-element Vector{Float64}:\n 0.0\n 0.39269908169872414\n 0.7853981633974483\n 1.1780972450961724\n 1.5707963267948966\n```\n:::\n:::\n\n\n### The range operator\n\n\nThe \"range\" operator, `:`, is used to specify a step size, like $h$ in the definition above. To get values which step by 1 we simply specify the start and end values:\n\n::: {.cell execution_count=42}\n``` {.julia .cell-code}\n1:4\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n1:4\n```\n:::\n:::\n\n\nThat isn't so impressive. The description `julia` uses to show this value is exactly how we defined it, but this range is specifying the values 1, 2, 3, 4. To see that, we `collect` the values to make an array:\n\n::: {.cell execution_count=43}\n``` {.julia .cell-code}\ncollect(1:4)\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\n4-element Vector{Int64}:\n 1\n 2\n 3\n 4\n```\n:::\n:::\n\n\nThe range operator returns a `Range` object which is much more compact to store than the array. (The range object is an *iterator*, something to be stepped through one at a time. Iterating over the elements specified by a range does not require all the elements at once, so they are not generated.)\n\n\nThe range operator can also work with a step size:\n\n::: {.cell execution_count=44}\n``` {.julia .cell-code}\na=0; b=10; h=3\na:h:b\ncollect(a:h:b)\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\n4-element Vector{Int64}:\n 0\n 3\n 6\n 9\n```\n:::\n:::\n\n\nNotice, the value for `b` is treated as as suggestion, the range will stop without exceeding `b`.\n\n\nThe $x$ values for a plot are typically a sequence of increasing values from $a$ to $b$. We would generally like to be able to specify the number of values to plot. This makes `range` the go-to choice to use.\n\n\n### Practice\n\n\n#### Question\n\n\nWhich command will produce the sequence $1,3,5,7,9,11, ..., 99$?\n\n::: {.cell execution_count=45}\n\n::: {.cell-output .cell-output-display execution_count=44}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='6247202873158807523' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_6247202873158807523\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_6247202873158807523_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_6247202873158807523\"\n              id=\"radio_6247202873158807523_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>&#91;1,3,5,7,9,11, ..., 99&#93;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_6247202873158807523_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_6247202873158807523\"\n              id=\"radio_6247202873158807523_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>range&#40;1, 99, length&#61;2&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_6247202873158807523_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_6247202873158807523\"\n              id=\"radio_6247202873158807523_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>1:2:99</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_6247202873158807523_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_6247202873158807523\"\n              id=\"radio_6247202873158807523_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>1:99</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='6247202873158807523_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_6247202873158807523\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('6247202873158807523_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_6247202873158807523\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_6247202873158807523\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nWhich command produces 10 numbers between 0 and 10 that are evenly spaced?\n\n::: {.cell execution_count=46}\n\n::: {.cell-output .cell-output-display execution_count=45}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='14399492719474984714' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_14399492719474984714\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14399492719474984714_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14399492719474984714\"\n              id=\"radio_14399492719474984714_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>&#91;0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#93;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14399492719474984714_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14399492719474984714\"\n              id=\"radio_14399492719474984714_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>range&#40;0, 10, length&#61;10&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14399492719474984714_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14399492719474984714\"\n              id=\"radio_14399492719474984714_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>0:1:101</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14399492719474984714_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14399492719474984714\"\n              id=\"radio_14399492719474984714_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>0:10</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='14399492719474984714_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_14399492719474984714\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('14399492719474984714_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_14399492719474984714\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_14399492719474984714\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nWhich command does not produce the numbers $1, 2, 3, 4, 5$?\n\n::: {.cell execution_count=47}\n\n::: {.cell-output .cell-output-display execution_count=46}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='8115838287367409648' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_8115838287367409648\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_8115838287367409648_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_8115838287367409648\"\n              id=\"radio_8115838287367409648_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>&#91;1, 2, 3, 4, 5&#93;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_8115838287367409648_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_8115838287367409648\"\n              id=\"radio_8115838287367409648_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>1:5</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_8115838287367409648_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_8115838287367409648\"\n              id=\"radio_8115838287367409648_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>range&#40;1, 5, length&#61;5&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_8115838287367409648_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_8115838287367409648\"\n              id=\"radio_8115838287367409648_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>1:5:1</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='8115838287367409648_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_8115838287367409648\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('8115838287367409648_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_8115838287367409648\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_8115838287367409648\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nWhich command does  produces the numbers $1, 1, 2, 3, 5, 8, 13$?\n\n::: {.cell execution_count=48}\n\n::: {.cell-output .cell-output-display execution_count=47}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='12106198753608637774' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_12106198753608637774\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_12106198753608637774_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_12106198753608637774\"\n              id=\"radio_12106198753608637774_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>&#91;1,1,2,3,5,8,13&#93;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_12106198753608637774_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_12106198753608637774\"\n              id=\"radio_12106198753608637774_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>1:2:13</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_12106198753608637774_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_12106198753608637774\"\n              id=\"radio_12106198753608637774_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>range&#40;1, 13, length&#61;7&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_12106198753608637774_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_12106198753608637774\"\n              id=\"radio_12106198753608637774_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>&#91;0, 1, 1, 2, 3, 5&#93;</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='12106198753608637774_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_12106198753608637774\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('12106198753608637774_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_12106198753608637774\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_12106198753608637774\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n## Indexing\n\n\nA column vector has a natural sense of first, second, ..., the $n$-th element. This allows `julia` to refer to the values by index ($1$-based, unlike some other computer languages). So, if `x` is an array, `x[1]` is the first value in that array. One can extract and *assign* values using indices. A simple example is:\n\n::: {.cell execution_count=49}\n``` {.julia .cell-code}\nx = [2, 3, 5, 7, 11, 13, 17]\nx[1]\nx[3]\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\n5\n```\n:::\n:::\n\n\nThere are some special values. The `end` value refers to the last ($n$ th):\n\n::: {.cell execution_count=50}\n``` {.julia .cell-code}\nx[end]\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\n17\n```\n:::\n:::\n\n\nThe $n$ ‚Äì or number of elements ‚Äì can be returned by `length`:\n\n::: {.cell execution_count=51}\n``` {.julia .cell-code}\nlength(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\n7\n```\n:::\n:::\n\n\nA range object can be used for indices:\n\n::: {.cell execution_count=52}\n``` {.julia .cell-code}\nx[1:3]\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\n3-element Vector{Int64}:\n 2\n 3\n 5\n```\n:::\n:::\n\n\nThe value `end` can be used in a range when indexing:\n\n::: {.cell execution_count=53}\n``` {.julia .cell-code}\nx[2:end]\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\n6-element Vector{Int64}:\n  3\n  5\n  7\n 11\n 13\n 17\n```\n:::\n:::\n\n\n(But not without indexing, as you can see by typing `2:end` by itself.)\n\n\n:::{.callout-note}\n## Left side of an equals sign\n`Julia` allows only three different types of expressions on the left side of an equals sign:\n\n  * a variable name, as in `x = 42`,\n  * a function definition, as in `f(x) = x^2 - 2`, or\n  * a assignment setting an index, as in `x[1] = 2`.\n\nThe left side is quite unlike a math equation, where arbitrary expressions are typical.\n\n:::\n\n### Practice\n\n\n#### Question\n\n\nLet\n\n::: {.cell execution_count=54}\n``` {.julia .cell-code}\nx = [1, 1, 2, 3, 5, 8, 13]\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\n7-element Vector{Int64}:\n  1\n  1\n  2\n  3\n  5\n  8\n 13\n```\n:::\n:::\n\n\nWhat is the value of `x[end - 1] + x[end]`?\n\n::: {.cell execution_count=55}\n\n::: {.cell-output .cell-output-display execution_count=54}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='12247253142017767770' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_12247253142017767770\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"12247253142017767770\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='12247253142017767770_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"12247253142017767770\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 21) <= 1.0e-16);\n  var msgBox = document.getElementById('12247253142017767770_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_12247253142017767770\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_12247253142017767770\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nLet\n\n::: {.cell execution_count=56}\n``` {.julia .cell-code}\nx = [1, 1, 2, 3, 5, 8, 13]\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```\n7-element Vector{Int64}:\n  1\n  1\n  2\n  3\n  5\n  8\n 13\n```\n:::\n:::\n\n\nWhat is the value of `x[3]`?\n\n::: {.cell execution_count=57}\n\n::: {.cell-output .cell-output-display execution_count=56}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='2233615744129794530' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_2233615744129794530\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"2233615744129794530\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='2233615744129794530_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"2233615744129794530\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 2) <= 1.0e-16);\n  var msgBox = document.getElementById('2233615744129794530_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_2233615744129794530\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_2233615744129794530\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nWhen a vector is created, if possible, the resulting values are converted to be the same type.  Let\n\n::: {.cell execution_count=58}\n``` {.julia .cell-code}\nx = [1, 2.0]\ny = [1, 2.0, \"three\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```\n3-element Vector{Any}:\n 1\n 2.0\n  \"three\"\n```\n:::\n:::\n\n\nFor   `x[1]` and `y[1]` what does `typeof` return?\n\n::: {.cell execution_count=59}\n\n::: {.cell-output .cell-output-display execution_count=58}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='16608301884475438222' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_16608301884475438222\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16608301884475438222_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16608301884475438222\"\n              id=\"radio_16608301884475438222_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        &#40;Integer, ASCIIString&#41;\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16608301884475438222_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16608301884475438222\"\n              id=\"radio_16608301884475438222_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        &#40;Float, Integer&#41;\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16608301884475438222_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16608301884475438222\"\n              id=\"radio_16608301884475438222_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        &#40;Integer, Integer&#41;\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='16608301884475438222_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_16608301884475438222\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('16608301884475438222_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_16608301884475438222\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_16608301884475438222\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n(The `y` container is of type `Any` which allows it to hold any type of object, the `x` container only holds values of a certain type.)\n\n\n## Mapping a function to multiple values\n\n\nTo specify the $y$ values we wish to \"map\" the function `f` to each $x$ value.  In `julia` there are many different ways to do this, we list four for completeness, but will restrict our attention to just the first three styles.\n\n\n### The map function\n\n\nThe `map` function. In many areas of mathematics, one refers to a function as a \"map\" from the domain to the range. The implication is that the function takes all the $x$ values to the corresponding $y$ values at once (conceptually) and not one at a time. The `map` function will apply the function `f` to each value in the array `x`, basically taking `[x1, x2, ..., xn]` and returning `[f(x1), f(x2), ..., f(xn)]`.\n\n\nFor example, let's look at the simple polynomial $f(x) = -16x^2 + 32x$. We define our `julia` function with:\n\n::: {.cell execution_count=60}\n``` {.julia .cell-code}\nf(x) = -16x^2 + 32x\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```\nf (generic function with 1 method)\n```\n:::\n:::\n\n\nIf we want to look at this function for $x$ values between $0$ and $2$ we might define the $x$ values with:\n\n::: {.cell execution_count=61}\n``` {.julia .cell-code}\nx = range(0, 2, length=5)\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```\n0.0:0.5:2.0\n```\n:::\n:::\n\n\nThen the `map` function will create the corresponding $y$ values:\n\n::: {.cell execution_count=62}\n``` {.julia .cell-code}\nmap(f, x)\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```\n5-element Vector{Float64}:\n  0.0\n 12.0\n 16.0\n 12.0\n  0.0\n```\n:::\n:::\n\n\nThe syntax of `map` requires a slight pause. Here we do not actually call the function `f`, as in `f(2)`. Rather, we pass the name of the function object to the `map` argument ‚Äì and `map` calls the function for each value in the column vector `x` and returns a corresponding column vector.\n\n\nIt is also quite common to use anonymous functions with `map`. For example:\n\n::: {.cell execution_count=63}\n``` {.julia .cell-code}\nmap(u -> 10 * u^2, x)\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```\n5-element Vector{Float64}:\n  0.0\n  2.5\n 10.0\n 22.5\n 40.0\n```\n:::\n:::\n\n\nWe use `u` for the dummy variable in the anonymous function, so as not to get it confused with the variable `x` holding our values, but this is not necessary.\n\n\n### Broadcasting\n\n\n`Julia` allows a function to be broadcast over a collection of values with a simple notational trick or inserting a \".\" *before* the parenthesis. To see, we have:\n\n::: {.cell execution_count=64}\n``` {.julia .cell-code}\nsin.([1,2,3])\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```\n3-element Vector{Float64}:\n 0.8414709848078965\n 0.9092974268256817\n 0.1411200080598672\n```\n:::\n:::\n\n\nIn this use, the output is the same as though `map(sin, [1,2,3])` were called. In general, this \".\" notation is a bit different, as there can be multiple arguments passed and the size of the values is matched if possible by replication. For example, this command find the logarithm of 5 for different bases. The value 5 is replicated once for each of the bases:\n\n::: {.cell execution_count=65}\n``` {.julia .cell-code}\nlog.([2,pi,5,10], 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```\n4-element Vector{Float64}:\n 2.321928094887362\n 1.4059543061897808\n 1.0\n 0.6989700043360187\n```\n:::\n:::\n\n\n:::{.callout-note}\n## Note\nThe \"dot\" broadcasting is very succinct and useful, but using `map` is more explicit and easier to reason about. We will mostly use broadcasting due to the simplicity.\n\n:::\n\n### Comprehensions\n\n\nMathematicians are fond of set notation, as in this way to describe the $y$ values in a graph:\n\n\n\n$$\ny = \\{ f(x): x \\text{ in } [0, 2] \\},\n$$\n\n\nThis is read: \"the values $f(x)$ *for* each $x$ in the interval $[0,2]$.\"\n\n\nHere we define values `xs` to represent the continuum of values in the interval $[0,2]$, then use a \"comprehension\" to create the set notation above. The syntax is similar:\n\n::: {.cell execution_count=66}\n``` {.julia .cell-code}\nxs = range(0, 2.0, length=5)\n[f(x) for x in xs]\n```\n\n::: {.cell-output .cell-output-display execution_count=65}\n```\n5-element Vector{Float64}:\n  0.0\n 12.0\n 16.0\n 12.0\n  0.0\n```\n:::\n:::\n\n\nThe two approaches, broadcasting/maps and comprehensions, are equally useful. Perhaps `map` is a bit less trouble, but comprehensions mirror a more familiar mathematical syntax and generalize to functions of more than one variable nicely. One difference to keep in mind when deciding which to use, is that broadcasting/mapping requires a function, whereas comprehensions use expressions.\n\n\n### For loops\n\n\nFinally, for completeness, we mention another means to generate vectors of numbers that is more familiar to users of other computer languages.\n\n\nThe `for` loop is a very common pattern in computer programming. For speed reasons, some languages (e.g., `MATLAB` and `R`) try to avoid for loops for a \"vectorized\" approach (see below), but `julia` works well with `for` loops, and they are sometimes easier to understand than a vectorized approach.\n\n\nA `for` loop simply loops over each value in the iterable data vector `x` giving it a temporary name as it goes. To use a `for` loop to create the $y$ values requires several steps. The first creates a container to hold the new values, using the `similar` function to make a vector of the same size as `x` below (but fills it with nonsense):\n\n``` {.julia .cell-code}\ny = similar(x);\nfor i in 1:length(x)\n   y[i] = f( x[i] )\nend\n```\n\n\nThe `for` loop ends with the keyword `end`. Here we loop over each index of `x` and assign to the corresponding `y` value `f(x[i])`.\n\n\nConceptually this is the opposite of `map` where we think of the function acting on the entire column vector `x`. Instead, we iterate one-by-one over the values of `x` saving the function values as we go. The use of for loops is called *imperative programming*, as you describe each step. The use of functions like `map` is called *declarative programming* as you simply declare what you want and the computer language does the rest.\n\n\nIn some languages for loops are avoided if possible, as they can be slower. As well, they can require extra bookkeeping, such as needing to allocate a container for the answers. That being said, in `julia` they are widely used for speed and storage reasons. As well, they are used when we need to refer to more than one index. An example of that is the following way to create a Fibonacci pattern from the formula $x_i = x_{i-1} + x_{i-2}$:\n\n``` {.julia .cell-code}\nx = zeros(Int, 10); \t\t## pre-allocate an integer array\nx[1:2] = [1,1]\nfor i in 3:length(x)\n   x[i] =  x[i-1] + x[i-2]\nend\n```\n\n\nRelated to a `for` loop is the `while` loop. This will repeat as long as some condition is true. The following pattern reproduces a `for` loop:\n\n``` {.julia .cell-code}\ni, n = 1, length(x)\nwhile (i <= n)\n  print( x[i], \" \" )\t\t\t## do something ...\n  i = i + 1\nend\n```\n\n\nWe will use `while` loops when we iterate some process and are waiting until some computed value gets close to $0$.\n\n\n### Example\n\n\nPutting this altogether, to create the \"T\"-table used to graph $y=x^2$, we could do any of these:\n\n::: {.cell execution_count=70}\n``` {.julia .cell-code}\nf(x) = x^2\nxs = 1:4\nys = map(f, xs)\n[xs ys]\n```\n\n::: {.cell-output .cell-output-display execution_count=68}\n```\n4√ó2 Matrix{Int64}:\n 1   1\n 2   4\n 3   9\n 4  16\n```\n:::\n:::\n\n\nor\n\n::: {.cell execution_count=71}\n``` {.julia .cell-code}\nf(x) = x^2\nxs = 1:4\nys = f.(xs)\n[xs ys]\n```\n\n::: {.cell-output .cell-output-display execution_count=69}\n```\n4√ó2 Matrix{Int64}:\n 1   1\n 2   4\n 3   9\n 4  16\n```\n:::\n:::\n\n\nor\n\n::: {.cell execution_count=72}\n``` {.julia .cell-code}\nxs = [1, 2, 3, 4]\nys = [x^2 for x in xs]\n[xs ys]\n```\n\n::: {.cell-output .cell-output-display execution_count=70}\n```\n4√ó2 Matrix{Int64}:\n 1   1\n 2   4\n 3   9\n 4  16\n```\n:::\n:::\n\n\nor\n\n::: {.cell execution_count=73}\n``` {.julia .cell-code}\nxs = 1:4\nys = similar(xs)\nfor i in 1:length(xs)\n    ys[i] = xs[i]^2\nend\n[xs ys]\n```\n\n::: {.cell-output .cell-output-display execution_count=71}\n```\n4√ó2 Matrix{Int64}:\n 1   1\n 2   4\n 3   9\n 4  16\n```\n:::\n:::\n\n\nMany options, but the shortest to type is simply `[xs f.(xs)]`, so that is what is used most commonly.\n\n\n### Practice\n\n\n#### Questions\n\n\nDoes this command produce the values $\\{.1, .01, .001, .0001\\}$?\n\n``` {.julia .cell-code}\nx = [(1/10)^i for i in 1:4]\n```\n\n\n::: {.cell execution_count=75}\n\n::: {.cell-output .cell-output-display execution_count=72}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='12760431041616108503' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_12760431041616108503\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_12760431041616108503_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_12760431041616108503\"\n              id=\"radio_12760431041616108503_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        true\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_12760431041616108503_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_12760431041616108503\"\n              id=\"radio_12760431041616108503_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        false\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='12760431041616108503_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_12760431041616108503\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('12760431041616108503_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_12760431041616108503\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_12760431041616108503\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Questions\n\n\nLet $f(x) = x^2 - 2x$. Which command will produce the $y$ values for plotting $f$ over $[0, 2]$?\n\n::: {.cell execution_count=76}\n\n::: {.cell-output .cell-output-display execution_count=73}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='11549849907986928873' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_11549849907986928873\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11549849907986928873_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11549849907986928873\"\n              id=\"radio_11549849907986928873_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f.&#40;range&#40;0, 2, length&#61;100&#41;&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11549849907986928873_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11549849907986928873\"\n              id=\"radio_11549849907986928873_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>&#91;f&#40;x&#41; for x in &#91;0,2&#93;&#93;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11549849907986928873_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11549849907986928873\"\n              id=\"radio_11549849907986928873_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>map&#40;f&#40;x&#41;, &#91;0,2&#93;&#41;</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='11549849907986928873_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_11549849907986928873\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('11549849907986928873_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_11549849907986928873\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_11549849907986928873\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Questions\n\n\nWill this command produce $y$ values for plotting $f(x)$ over $[0,1]$?\n\n``` {.julia .cell-code}\nf(x) = x^2 - 2x\n[f(x) for x in 0:1/100:1];\n```\n\n\n::: {.cell execution_count=78}\n\n::: {.cell-output .cell-output-display execution_count=74}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='7073244839351504486' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_7073244839351504486\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7073244839351504486_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7073244839351504486\"\n              id=\"radio_7073244839351504486_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        true\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7073244839351504486_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7073244839351504486\"\n              id=\"radio_7073244839351504486_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        false\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='7073244839351504486_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_7073244839351504486\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('7073244839351504486_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_7073244839351504486\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_7073244839351504486\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n## Graphing points connected with lines\n\n\nIf one has two vectors `xvals` and `yvals` of equal size then creating a graphic for them is straightforward. The basic syntax is\n\n``` {.julia .cell-code}\nplot(xvals, yvals)\n```\n\n\nFor example, to plot $y=x^2$ over $[-1,1]$ we might do:\n\n::: {.cell execution_count=80}\n``` {.julia .cell-code}\nf(x) = x^2\nxs = range(-1, 1, length=101)\nys = f.(xs)\nplot(xs, ys)\n```\n\n::: {.cell-output .cell-output-display execution_count=75}\n![](graphing_files/figure-html/cell-81-output-1.svg){}\n:::\n:::\n\n\nOne can place both to get both points and lines. The `scatter` function will plot the points, but not connect the lines. In the following, the `scatter!` function is used. (Not the `!` at the end.) This form adds the plot of the lines to the last graph, rather than make a new one.\n\n::: {.cell execution_count=81}\n``` {.julia .cell-code}\nxs = range(-2, 2, length=5)\nys = f.(xs)\nplot(xs, ys)\nscatter!(xs, ys, markersize=5)\n```\n\n::: {.cell-output .cell-output-display execution_count=76}\n![](graphing_files/figure-html/cell-82-output-1.svg){}\n:::\n:::\n\n\n## Two functions at once\n\n\nWe use layering to plot two or more functions at once, though there are alternatives (plotting a vector of functions will do the same).\n\n\nFor example, to graph both the sine and cosine function we have:\n\n::: {.cell execution_count=82}\n``` {.julia .cell-code}\nplot(sin, 0, 2pi)\nplot!(cos)\n```\n\n::: {.cell-output .cell-output-display execution_count=77}\n![](graphing_files/figure-html/cell-83-output-1.svg){}\n:::\n:::\n\n\nOr to compare the effects of a simple transformation:\n\n::: {.cell execution_count=83}\n``` {.julia .cell-code}\nf(x) = x^2\ng(x) = 15 + f(x-3)\nplot(f, -10, 10)\nplot!(g)\n```\n\n::: {.cell-output .cell-output-display execution_count=78}\n![](graphing_files/figure-html/cell-84-output-1.svg){}\n:::\n:::\n\n\nTo print a heavier $x$-axis, we can graph the function $y=0$, specified through the anonymous function `x -> 0`:\n\n::: {.cell execution_count=84}\n``` {.julia .cell-code}\nf(x) = x^2 - 2\nplot(f, -2, 2)\nplot!(x -> 0)\n```\n\n::: {.cell-output .cell-output-display execution_count=79}\n![](graphing_files/figure-html/cell-85-output-1.svg){}\n:::\n:::\n\n\nThe above, may also be done with `zero`:\n\n::: {.cell execution_count=85}\n``` {.julia .cell-code}\nplot(f, -2, 2)\nplot!(zero, -2, 2)   # zero is a function returning 0, useful for programming in general.\n```\n\n::: {.cell-output .cell-output-display execution_count=80}\n![](graphing_files/figure-html/cell-86-output-1.svg){}\n:::\n:::\n\n\n##### Example: Operators, aka. derived functions\"\n\n\nOften we wish to plot a function derived from another function. For example, this is used to add a secant line to a graph. The following function (which is in the `MTH229` package) will create a function which represents the secant line of $f(x)$ between two points, $a$ and $b$:\n\n``` {.julia .cell-code}\nfunction secant(f, a, b)\n\t m =  (f(b) - f(a)) / (b-a)\t# slope of secant line\n\t x -> f(a) + m * (x - a)\nend\n```\n\n\nPause for a moment to see what this function does. The first line simply finds the slope between the two points $(a,f(a))$ and $(b,f(b))$. The second does something with the point-slope form of a line using the point $(a, f(a))$. The tricky part is that last line defines an anonymous function to be returned (the `x ->` part). So `secant` is an *operator* ‚Äì a function which accepts a function for an argument and returns a function.\n\n\nUsing this function makes it simple to add a secant line to a graph.\n\n::: {.cell execution_count=87}\n``` {.julia .cell-code}\nf(x) = sin(x)\na, b = 0, pi/2\nplot(f, a, b)\nplot!(secant(f, a, b))\n```\n\n::: {.cell-output .cell-output-display execution_count=81}\n![](graphing_files/figure-html/cell-88-output-1.svg){}\n:::\n:::\n\n\n### Practice\n\n\n#### Question\n\n\nDefine $f(x)$ to be a triangular function as follows:\n\n::: {.cell execution_count=88}\n``` {.julia .cell-code}\nf(x) = max(0, 1.0 - abs(x))\n```\n\n::: {.cell-output .cell-output-display execution_count=82}\n```\nf (generic function with 1 method)\n```\n:::\n:::\n\n\nIn many applications, the following transformation is employed:\n\n\n\n$$\ng(x, c, h) = \\frac{1}{h} f(\\frac{x - c}{h})\n$$\n\n\nFor constants $h$ and $c$.\n\n\nMake a graph of both $f(x)$ and $g(x, 1, 1/2)$ over the interval $[-2,3]$. Consult the graph to see which statement is true?\n\n::: {.cell execution_count=89}\n\n::: {.cell-output .cell-output-display execution_count=83}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='7908736826332665661' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_7908736826332665661\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7908736826332665661_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7908736826332665661\"\n              id=\"radio_7908736826332665661_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        The graph of g is centered at c&#61;1 and has the same area as f\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7908736826332665661_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7908736826332665661\"\n              id=\"radio_7908736826332665661_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        The graph of g is centered at c&#61;1 and has area h&#61;1/2\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7908736826332665661_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7908736826332665661\"\n              id=\"radio_7908736826332665661_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        The graph of g is centered at c&#61;1 and has area 1/h&#61;2\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7908736826332665661_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7908736826332665661\"\n              id=\"radio_7908736826332665661_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        The graph of g is centered at c&#61;1 and has maximum height h&#61;1/2\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='7908736826332665661_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_7908736826332665661\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('7908736826332665661_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_7908736826332665661\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_7908736826332665661\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nWe saw that this  will produce two graphs:\n\n::: {.cell execution_count=90}\n``` {.julia .cell-code}\nplot(sin, 0, 2pi)\nplot!(x -> cos(x) > 0 ? 0.0 : NaN)\n```\n\n::: {.cell-output .cell-output-display execution_count=84}\n![](graphing_files/figure-html/cell-91-output-1.svg){}\n:::\n:::\n\n\nWhat is the sine curve doing when the flat line is drawn?\n\n::: {.cell execution_count=91}\n\n::: {.cell-output .cell-output-display execution_count=85}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='15479320590450277063' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_15479320590450277063\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_15479320590450277063_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_15479320590450277063\"\n              id=\"radio_15479320590450277063_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Only decreasing\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_15479320590450277063_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_15479320590450277063\"\n              id=\"radio_15479320590450277063_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Only increasing\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_15479320590450277063_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_15479320590450277063\"\n              id=\"radio_15479320590450277063_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        Only concave up\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_15479320590450277063_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_15479320590450277063\"\n              id=\"radio_15479320590450277063_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        Oscillating: Going up and down\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='15479320590450277063_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_15479320590450277063\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('15479320590450277063_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_15479320590450277063\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_15479320590450277063\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nMake a graph of $f(x) = x$, $g(x) = \\tan(x)$, and $h(x) = \\sin(x)$. Over the interval $[0,\\pi/4]$. Based on this graph which of the following below seems correct?\n\n::: {.cell execution_count=92}\n\n::: {.cell-output .cell-output-display execution_count=86}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='16123623444289397212' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_16123623444289397212\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16123623444289397212_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16123623444289397212\"\n              id=\"radio_16123623444289397212_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(h < g < f\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16123623444289397212_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16123623444289397212\"\n              id=\"radio_16123623444289397212_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(g < f < h\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16123623444289397212_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16123623444289397212\"\n              id=\"radio_16123623444289397212_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(f < g < h\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16123623444289397212_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16123623444289397212\"\n              id=\"radio_16123623444289397212_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(h < f < g\\)\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='16123623444289397212_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_16123623444289397212\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('16123623444289397212_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_16123623444289397212\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_16123623444289397212\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "graphing_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}