{
  "hash": "b0ae8c8992155f215c369e673472e8cc",
  "result": {
    "markdown": "# Functions in Julia\n\n\n\n<br/>\nA notebook for this material:\n[ipynb](https://raw.githubusercontent.com/mth229/229-projects/master/02-functions.ipynb)\n[(Pluto html)](./229-projects/02-functions.html)\n[(With commentary)](./229-projects/02-functions-pluto-commentary.html)\n\n\n## Introduction\n\n\nWe see in this section how to easily create functions in `Julia`. In the following sections we begin to do things with function, such as learning how to graph functions with `Julia`.\n\n\nFor basic things creating a new function and plotting it is as familiar as this:\n\n\nWe begin by loading some packages:\n\n``` {.julia .cell-code}\nusing MTH229\nusing Plots\n```\n\n\n\n\nThen we define a function and plot it:\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nf(x) = sin(3x^2 - 2x^3)\nplot(f, 0, pi)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n![](functions_files/figure-html/cell-5-output-1.svg){}\n:::\n:::\n\n\nReally, you'd be hard pressed to make this any shorter or more familiar.  Of course, not everything is this easy so there are still things to learn, but keep in mind that 90% of what we want to do in these projects is really this straightforward.\n\n\nMathematically, a function can be viewed in many different ways. An abstract means is to think of a function as a mapping, assigning to each $x$ value in the function's domain, a corresponding $y$ value in the function's range. With computer languages, such as `Julia`, the same holds, though there may be more than one argument to the function and with `Julia` the number of arguments and type of each argument are consulted to see exactly which function is to be called.\n\n\nHere we don't work abstractly though. For a mathematical function (real-valued function of a single variable, $f: \\mathbb{R} \\rightarrow \\mathbb{R}$), we typically just have some rule for what the function will do to $x$ to produce $y$, such as\n\n\n\n$$\nf(x) = \\sin(x) - \\cos(x).\n$$\n\n\nIn `Julia` there are a few different ways to define a function, we start with the most natural one which makes it very simple to work with such functions.\n\n\n## Mathematical functions\n\n\nReal-valued functions ($f: \\mathbb{R} \\rightarrow \\mathbb{R}$) are often described in terms of elementary types of functions such as polynomial, trigonometric, or exponential. We give examples of each in the following.\n\n\n## Polynomials and related functions\n\n\nOne of the most basic families of functions are the polynomial functions, which include as special cases the very familiar constant functions, linear functions and quadratic functions.\n\n\nLet's look at the familiar *linear* function to convert Fahrenheit into Celsius:\n\n\n\n$$\nf(x) = 5/9 \\cdot (x - 32).\n$$\n\n\nThat is we subtract $32$ then multiply by $5/9$\n\n\nWe can easily turn this into a function, simply by replacing the mathematical notation $\\cdot$ with `*`:\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nf(x) = (5/9) * (x - 32)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nf (generic function with 1 method)\n```\n:::\n:::\n\n\nThis defines a function object `f`. To evaluate `f` for a given value of $x$ we simply use the familiar mathematical notation. Here we see what Celsius is for \"normal\" body temperature:\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nf(98.6)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n37.0\n```\n:::\n:::\n\n\nAnd the Celsius equivalent to the standard boiling point:\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nf(212)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n100.0\n```\n:::\n:::\n\n\n:::{.callout-note}\n## Alert\n**Calling a function** Evaluating a function for a given value is also known in programming languages as \"calling\" `f`. When we work with functions in `Julia`, the distinction between the function object and calling the function is important to keep straight – though not too hard to do. In mathematical notation, it is sort of like the difference between writing $f$ – as opposed to $f(x)$ – to describe the function, the latter implying there is some $x$ to be evaluated, so we think of $f(x)$ as a $y$-value and $f$ as a function.\n\n:::\n\n### Numeric literals\n\n\n`Julia` provides the familiar notation above for simple functions. In fact, for polynomials with numeric coefficients, one can even skip using `*` for multiplication:\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\ng(x) = 2x^2 - 3x + 2\ng(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n4\n```\n:::\n:::\n\n\nThe convention is that when variables are immediately preceded by a numeric literal (and by immediately it is meant no spaces are in between) `Julia` will assume multiplication is intended. (This can bypass the usual order of operations, e.g.  `5/9(x-32)` is not `5/9*(x-32)`.)\n\n\nThis can also be used when simple parentheses are involved:\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nk(x) = 2(x - 1)^2 + 3(x+1)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nk (generic function with 1 method)\n```\n:::\n:::\n\n\nBut won't work with expressions such as `(x+1)(x-1)`, as `Julia` will then think the first parenthetical pair is a function and try to call it with a value of `x-1`.\n\n\n#### Example: Equations versus functions\n\n\nMathematically we tend to blur the distinction between the equation\n\n\n\n$$\ny = 5/9 \\cdot (x - 32)\n$$\n\n\nand the function\n\n\n\n$$\nf(x) = 5/9 \\cdot (x - 32)\n$$\n\n\nAs the graph of the function $f(x)$ is the same as the graph of the equation $y=f(x)$. There is a distinction in `Julia` as these commands\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\nx = -40\ny = 5/9 * (x - 32)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n-40.0\n```\n:::\n:::\n\n\nwill evaluate the righthand side with the value of `x` bound at the time of assignment to `y`, whereas\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\nf(x) = 5/9 * (x - 32)\nf(72)\t\t\t\t## room temperature\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n22.22222222222222\n```\n:::\n:::\n\n\nwill create a function which is called with a value of `x` at a later time. So the value of `x` defined when the function is created is not important here (as `x` is passed in as an argument).\n\n\n### Rational functions\n\n\nRational functions are simply ratios of polynomial functions. Defining them is straightforward. For example.\n\n\n\n$$\nf(x) = \\frac{x^2 - 2}{x - 2}\n$$\n\n\nbecomes\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nf(x) = (x^2 - 2)/(x-2)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nf (generic function with 1 method)\n```\n:::\n:::\n\n\nHere, as with your calculator, it is important to remember to use parentheses around the top and bottom expressions, as otherwise the division operator will have higher precedence than the subtraction operators.\n\n\n### Other powers\n\n\nWhile polynomials use non-negative integer coefficients for the powers, functions with other powers are, of course, possible. The `^` operator is used in general for powers, and the `sqrt` and `cbrt` offer an alternative.\n\n\nSo, this\n\n\n\n$$\nf(x) = \\sqrt{x} + x^{1/3} + x^{1/4}\n$$\n\n\ncan become:\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\nf(x) = sqrt(x) + cbrt(x) + x^(1/4)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nf (generic function with 1 method)\n```\n:::\n:::\n\n\nFor the fractional power, this shows the required parentheses around `(1/4)` to ensure that division occurs before the higher-precedence power operation (compare `2^1/4` to `2^(1/4)`).\n\n\n## Common functions\n\n\nOf course `Julia` has readily available all the usual built-in functions found on a scientific calculator, and many more. See the section on [mathematical operations and functions](https://docs.julialang.org/en/latest/manual/mathematical-operations/) of the official `Julia` documentation. In the following, we show how to translate some basic math functions into `Julia` functions:\n\n\n### Trigonometric functions\n\n\n\n$$\nf(x) = \\cos(x) - \\sin^2(x)\n$$\n\n\nbecomes\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\nf(x) = cos(x) - sin(x)^2\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nf (generic function with 1 method)\n```\n:::\n:::\n\n\n:::{.callout-note}\n## About exponents and functions...\nThe conversion from the commonly written form ($\\sin^2(x)$) to the far less ambiguous $\\sin(x)^2$ is very important. This is necessary with `Julia` – as it is with calculators – as there is no function `sin^2`. In Julia, squaring is done on values – not functions, like `sin`. (And most likely squaring of a function is more likely to be composition, which is not the usage here.) So, to have success, learn to drop the notations $\\sin^2(x)$ or for the arc sine function $\\sin^{-1}(x)$. These shortcuts are best left in the age when mathematics was done just on paper.\n\n:::\n\n---\n\n\nIf you want to work in degrees you can do so with the degree-based trigonometric functions, which follow the same naming pattern save a trailing \"d\":\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\nfd(x) = cosd(x) - sind(x)^2\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nfd (generic function with 1 method)\n```\n:::\n:::\n\n\n### Inverse trigonometric functions\n\n\nA mathematical definition like\n\n\n\n$$\nf(x) = 2\\tan^{-1}\\left(\\frac{\\sqrt{1 - x^2}}{1 + x}\\right)\n$$\n\n\nbecomes\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\nf(x) = 2atan( sqrt(1-x^2) / (1 + x) )\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nf (generic function with 1 method)\n```\n:::\n:::\n\n\nThis particular function is just an alternative expression for the arc cosine (mathematically $\\cos^{-1}$ but in `Julia` `acos`) using the arctan function, as seen here:\n\n::: {.cell execution_count=17}\n``` {.julia .cell-code}\nf(.5) - acos(.5) ## nearly 0\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n-2.220446049250313e-16\n```\n:::\n:::\n\n\nThe exponent in the inverse trigonometric functions is *just* mathematical notation for the longer expression \"arctan\" or \"arccos\". (It definitely is not a reciprocal.)  The `Julia` functions – like most all computer languages – abbreviate these names to `atan`, `acos` or `asin`.\n\n\n### Exponential function\n\n\nThe math function\n\n\n\n$$\nf(x) = e^{-\\frac{1}{2}x^2}\n$$\n\n\nCan be expressed as\n\n::: {.cell execution_count=18}\n``` {.julia .cell-code}\nf(x) = e^(-(1/2)*x^2)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nf (generic function with 1 method)\n```\n:::\n:::\n\n\nThe value of $e$ is built-in to `Julia`, but not immediately available. It is s exposed by the `MTH229` package. But $e$ can be inadvertently redefined. As such, it is a safer practice to use the `exp` function, as in:\n\n::: {.cell execution_count=19}\n``` {.julia .cell-code}\nf(x) = exp(-(1/2)*x^2)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nf (generic function with 1 method)\n```\n:::\n:::\n\n\nThere isn't much difference in use, but don't try to do both at once, as in `exp^(-(1/2)*x^2)`!\n\n\n### Logarithms\n\n\nThe mathematical notations for logarithms often include $\\ln$ and $\\log$ for natural log and log base 10. With computers, there is typically just `log` for natural log, or with an extra argument the logarithm to other bases.\n\n\n\n$$\nf(x) = \\ln(1 - x)\n$$\n\n\nbecomes just\n\n::: {.cell execution_count=20}\n``` {.julia .cell-code}\nf(x) = log(1 - x)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nf (generic function with 1 method)\n```\n:::\n:::\n\n\nWhereas, the base 10 log:\n\n\n\n$$\nf(x) = \\log_{10}(1 + x)\n$$\n\n\ncan be done through:\n\n::: {.cell execution_count=21}\n``` {.julia .cell-code}\nf(x) = log(10, 1 + x)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nf (generic function with 1 method)\n```\n:::\n:::\n\n\nwhere the *first* argument expresses the base.  For convenience, `Julia` also gives the functions `log10` and `log2` for base 10 and 2 respectively.\n\n\n## Algebra of functions\n\n\nIn mathematics a typical observation is to recognize some object as a combination of simpler objects. For functions, we think of combining simpler functions into more complicated ones. For example, we can think of the sum of functions, $h(x) = f(x) + g(x)$. The rule for each $x$ is simply to *add* the results of the two rules for $f$ and $g$ applied to $x$. Notationally, we might write this as either:\n\n\n\n$$\nh = f + g\n$$\n\n\nor\n\n\n\n$$\nh(x) = f(x) + g(x).\n$$\n\n\nThe former treats $f$ and $g$ as function objects, the latter ties more closely to the concept of a function as a rule that operates on $x$.\n\n\nWith `Julia` the latter representation is more useful for defining combinations of functions. For example, if $f(x) = \\sin(x)$ and $g(x) = x^2$, then we can combine these in several ways. The following illustrates several ways to combine the two functions $f$ and $g$:\n\n::: {.cell execution_count=22}\n``` {.julia .cell-code}\nf(x) = sin(x)\ng(x) = x^2\nh(x) = f(x) + g(x)\t\t# f + g\nh(x) = f(x) - g(x)\t\t# f - g\nh(x) = f(x) * g(x)\t\t# f * g\nh(x) = f(x) / g(x)\t\t# f / g\nh(x) = f(x)^g(x)\t\t# f^g\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\nh (generic function with 1 method)\n```\n:::\n:::\n\n\nAll these are based on underlying mathematical operators. In addition, for functions there is the operation of *composition*, where the output of one function is the input to another. For example:\n\n::: {.cell execution_count=23}\n``` {.julia .cell-code}\nh(x) = f(g(x))\t\t\t# f ∘ g or sin(x^2)\nh(x) = g(f(x))\t\t\t# g ∘ f or (sin(x))^2\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\nh (generic function with 1 method)\n```\n:::\n:::\n\n\nThis operation is fundamentally non-commutative, as the above example illustrates.\n\n\n### Practice\n\n\n#### Question\n\n\nWhich of these functions will compute $\\sin^3(x^2)$?\n\n::: {.cell execution_count=24}\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='2868056596671865685' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_2868056596671865685\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_2868056596671865685_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_2868056596671865685\"\n              id=\"radio_2868056596671865685_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; sin^3&#40;x^2&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_2868056596671865685_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_2868056596671865685\"\n              id=\"radio_2868056596671865685_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; sin&#40;x^2&#41;^3</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_2868056596671865685_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_2868056596671865685\"\n              id=\"radio_2868056596671865685_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; sin&#40;x^2^3&#41;</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='2868056596671865685_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_2868056596671865685\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('2868056596671865685_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_2868056596671865685\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_2868056596671865685\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nWhich of these functions will compute\n\n\n\n$$\n\\frac{1}{\\sqrt{2\\pi}} e^{-\\frac{1}{2}x^2}?\n$$\n\n::: {.cell execution_count=25}\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='17878121684924185797' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_17878121684924185797\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_17878121684924185797_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_17878121684924185797\"\n              id=\"radio_17878121684924185797_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; 1/&#40;2pi&#41; * exp&#40;-&#40;1/2&#41;*x^2&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_17878121684924185797_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_17878121684924185797\"\n              id=\"radio_17878121684924185797_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; 1/sqrt&#40;2pi&#41; *  exp&#40;-&#40;1/2&#41;*x^2&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_17878121684924185797_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_17878121684924185797\"\n              id=\"radio_17878121684924185797_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; 1/&#40;2pi&#41; * exp^&#40;-&#40;1/2&#41;*x^2&#41;</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='17878121684924185797_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_17878121684924185797\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('17878121684924185797_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_17878121684924185797\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_17878121684924185797\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nDefine the function $f(x) = -16x^2 + 100$.\n\n\nIs $f(4)$ positive?\n\n::: {.cell execution_count=26}\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='973662807722786372' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_973662807722786372\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_973662807722786372_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_973662807722786372\"\n              id=\"radio_973662807722786372_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        yes\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_973662807722786372_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_973662807722786372\"\n              id=\"radio_973662807722786372_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        no\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='973662807722786372_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_973662807722786372\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('973662807722786372_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_973662807722786372\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_973662807722786372\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nDefine the function $f(x) = x^3 - 3x + 2$\n\n\nWhat is the value of $f(10)$?\n\n::: {.cell execution_count=27}\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='3683354325097991072' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_3683354325097991072\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"3683354325097991072\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='3683354325097991072_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"3683354325097991072\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 972) <= 0);\n  var msgBox = document.getElementById('3683354325097991072_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_3683354325097991072\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_3683354325097991072\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nDefine the function $f(x) = x^5 + x^4 + x^3$\n\n\nWhat is the value of $f(2)$?\n\n::: {.cell execution_count=28}\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='11675336119875646268' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_11675336119875646268\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"11675336119875646268\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='11675336119875646268_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"11675336119875646268\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 56) <= 0);\n  var msgBox = document.getElementById('11675336119875646268_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_11675336119875646268\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_11675336119875646268\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nWhich of these functions will compute $f(x) = x^2 -2x + 1$?\n\n::: {.cell execution_count=29}\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='13829746923324552603' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_13829746923324552603\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_13829746923324552603_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_13829746923324552603\"\n              id=\"radio_13829746923324552603_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; x^2 - 2x &#43; 1</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_13829746923324552603_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_13829746923324552603\"\n              id=\"radio_13829746923324552603_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; x^2 - 2x</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_13829746923324552603_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_13829746923324552603\"\n              id=\"radio_13829746923324552603_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; x^2 &#43; 2*x &#43; 1</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='13829746923324552603_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_13829746923324552603\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('13829746923324552603_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_13829746923324552603\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_13829746923324552603\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nWhich of these functions will compute\n\n\n\n$$\nf(x) = \\frac{x^2 - 2x}{x^2 - 3x}?\n$$\n\n::: {.cell execution_count=30}\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='9092345279772681546' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_9092345279772681546\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_9092345279772681546_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_9092345279772681546\"\n              id=\"radio_9092345279772681546_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; x^2 - 2x / x^2 - 3x</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_9092345279772681546_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_9092345279772681546\"\n              id=\"radio_9092345279772681546_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; &#40;x^2 - 2x&#41; / x^2 - 3x</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_9092345279772681546_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_9092345279772681546\"\n              id=\"radio_9092345279772681546_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; &#40;x^2 - 2x&#41; / &#40;x^2 - 3x&#41;</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='9092345279772681546_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_9092345279772681546\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('9092345279772681546_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_9092345279772681546\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_9092345279772681546\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\nWhich of these functions will compute\n\n\n\n$$\nf(x) = e^{-x} \\sin(x)?\n$$\n\n::: {.cell execution_count=31}\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='11509052548296350976' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_11509052548296350976\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11509052548296350976_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11509052548296350976\"\n              id=\"radio_11509052548296350976_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; exp&#40;sin&#40;x&#41;&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11509052548296350976_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11509052548296350976\"\n              id=\"radio_11509052548296350976_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; exp&#40;x&#41; * sin&#40;x&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11509052548296350976_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11509052548296350976\"\n              id=\"radio_11509052548296350976_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; exp&#40;-x&#41; * sin&#40;x&#41;</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='11509052548296350976_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_11509052548296350976\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('11509052548296350976_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_11509052548296350976\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_11509052548296350976\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n## Multi-step functions\n\n\nIf you want to define a more complicated function, say one with a few steps to compute, an alternate form for defining a function can be used:\n\n\n```\nfunction function_name(function_arguments)\n  ...function_body...\nend\n```\n\nThe last value computed is returned unless the `function_body` contains a `return` call.\n\n\nFor example, the following is a more verbose way to define $f(x) = x^2$:\n\n::: {.cell execution_count=32}\n``` {.julia .cell-code}\nfunction f(x)\n  return(x^2)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\nf (generic function with 1 method)\n```\n:::\n:::\n\n\nThe line `return(x^2)`, could have just been `x^2` as it is the last (and) only line evaluated.\n\n\n##### Example: Many parts\n\n\nImagine we have a complicated function, such as:\n\n\n\n$$\n g(x) = \\tan(\\theta) x + \\frac{32}{200 \\cos\\theta} x -\n    32 \\log\\left(\\frac{200 \\cos\\theta}{200\\cos\\theta - x}\\right).\n$$\n\n\nwhere $k$ is the constant 1/2 and $\\theta=\\pi/4$. To avoid errors in transcribing, it can be be useful to break such definitions up into steps. Here we note the repeated use of $200\\cos(\\theta)$ in the defintion of $g(x)$, so we give that value the intermediate name of `a`\n\n::: {.cell execution_count=33}\n``` {.julia .cell-code}\nfunction g(x)\n\t theta = pi/4\n\t a = 200*cos(theta)\n\t tan(theta)*x + (32/a)*x - 32*log(a/(a-x))\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\ng (generic function with 1 method)\n```\n:::\n:::\n\n\nFrom this, we can easily see that we would need to be concerned as $x$ approaches the value of `a`, as when $x \\geq a$ the logarithm won't be defined.\n\n\n## Functions defined by cases\n\n\n##### Example Hockey-stick functions\n\n\nHere is a different example, where we define a \"hockey stick\" function, a name for functions that are flat then increase linearly after some threshold.\n\n\nAn old-school cell-phone plan might cost $30 for the first 500 minutes of calling and 25 cents per minute thereafter. Represent this as a function of the number of minutes used.\n\n\nHere we need to do one of two things depending if $x$ is greater or less than $500$. There are different ways to do this, here we  use an `if-else-end` statement, which takes the following form:\n\n::: {.cell execution_count=34}\n``` {.julia .cell-code}\nfunction cell_phone(x)\n\t if x < 500\n\t   return(30.0)\n\t else\n\t   return(30.0 + 0.25*(x-500))\n\t end\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\ncell_phone (generic function with 1 method)\n```\n:::\n:::\n\n\nTo see what it would cost to talk for 720 minutes in a month, we have:\n\n::: {.cell execution_count=35}\n``` {.julia .cell-code}\ncell_phone(720)\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n85.0\n```\n:::\n:::\n\n\n:::{.callout-note}\n## A subtlety\nWe return `30.0` above – and not the integer `30` – when $x<500$ so that the function always returns a floating point value and not an integer if less than 0 and a floating point value if bigger.  In general it is a good programming practice to have functions return only one type of variable for a given type of input. In this case, as the answer could be real-valued – and not just integer-valued, we want to return floating point values.\n\n:::\n\nA quick plot will show why the above function is called a \"hockey stick\" function:\n\n::: {.cell execution_count=36}\n``` {.julia .cell-code}\nplot(cell_phone, 0, 1000)\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n![](functions_files/figure-html/cell-37-output-1.svg){}\n:::\n:::\n\n\nWhen functions that have different rules based on the specific value of $x$ that is input, the  use \"cases\" notation is common. For example,\n\n\n\n$$\nf(x) = \\begin{cases}\n\\cos(x) & x \\geq 0\\\\\n1 - e^{-1/x^2} & \\text{otherwise}.\n\\end{cases}\n$$\n\n\nTranslating this notation to `Julia` can also be done with the `if-else-end` construct:\n\n::: {.cell execution_count=37}\n``` {.julia .cell-code}\nfunction f(x)\n  if x >= 0\n    cos(x)\n  else\n    1 - exp(-1/x^2)\n  end\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\nf (generic function with 1 method)\n```\n:::\n:::\n\n\nThe expression after `if` is a *Boolean value* (a `true` or `false` value). In these examples they are generated through the *Boolean operators*, which include the familiar comparison symbols `<`, `<=`, `==`, `>=`, and `>`. (Only `==` takes learning, as double equal signs are used for comparison, a single one is for assignment.)\n\n\n### The \"ternary operator\", a simple alternative to if-else-end\n\n\nOne can use the so-called *ternary operator* `a ? b : c` for simple `if-else-end` statements as above.\n\n\nBasically, `a ? b : c` is the same as the more verbose\n\n\n```\nif a\n   b\nelse\n   c\nend\n```\n\nSo the cell-phone example could have been a one-liner:\n\n::: {.cell execution_count=38}\n``` {.julia .cell-code}\ncell_phone(x) = x < 500 ? 30.0 : 30.0 + 0.25*(x - 500)\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\ncell_phone (generic function with 1 method)\n```\n:::\n:::\n\n\nWhen `x < 500` the expression right after `?` is evaluated, and if not, the expression after `:` is.\n\n\nFor mathematical functions, the directness of the ternary operator usually makes it a preferred choice over `if-else-end`.\n\n\n##### Example: Nesting the ternary operator\n\n\nIt can be convenient to nest ternary operators. In particular, when the cases involve have more than 2 possibilities. The following does something depending on whether `x` is positive, negative or zero:\n\n::: {.cell execution_count=39}\n``` {.julia .cell-code}\nheaviside(x) = x > 0 ? 1.0 : x == 0.0 ? 0.0 : -1.0\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\nheaviside (generic function with 1 method)\n```\n:::\n:::\n\n\nThat is a mess to read, but easy to write. It can be made a bit clearer by using parentheses around the case where `x` is not greater than 0:\n\n::: {.cell execution_count=40}\n``` {.julia .cell-code}\nheaviside(x) = x > 0 ? 1.0 : (x == 0.0 ? 0.0 : -1.0)\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\nheaviside (generic function with 1 method)\n```\n:::\n:::\n\n\nSimilarly, new lines can clear up the flow:\n\n::: {.cell execution_count=41}\n``` {.julia .cell-code}\nheaviside(x) = x > 0 ? 1.0 :\n               x == 0.0 ? 0.0 :\n\t\t\t   -1.0\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\nheaviside (generic function with 1 method)\n```\n:::\n:::\n\n\n### Practice\n\n\n#### Question\n\n\nWhich of these definitions will be the equivalent of $f(x) = |x|$? (The `abs` function is already one):\n\n::: {.cell execution_count=42}\n\n::: {.cell-output .cell-output-display execution_count=43}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='7787506931455583521' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_7787506931455583521\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7787506931455583521_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7787506931455583521\"\n              id=\"radio_7787506931455583521_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; x</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7787506931455583521_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7787506931455583521\"\n              id=\"radio_7787506931455583521_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; x &gt; 0 ? x : 0.0</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7787506931455583521_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7787506931455583521\"\n              id=\"radio_7787506931455583521_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; x &gt; 0.0 ? -x : x</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7787506931455583521_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7787506931455583521\"\n              id=\"radio_7787506931455583521_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61;   x &gt; 0.0 ? x : -x</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='7787506931455583521_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_7787506931455583521\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('7787506931455583521_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_7787506931455583521\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_7787506931455583521\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nThe `sign` function returns $-1$ for negative numbers $1$ for positive numbers and $0$ for 0. Which of these functions could do the same?\n\n::: {.cell execution_count=43}\n\n::: {.cell-output .cell-output-display execution_count=44}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='1776911557495446249' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_1776911557495446249\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_1776911557495446249_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_1776911557495446249\"\n              id=\"radio_1776911557495446249_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; x/x</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_1776911557495446249_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_1776911557495446249\"\n              id=\"radio_1776911557495446249_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; x/abs&#40;x&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_1776911557495446249_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_1776911557495446249\"\n              id=\"radio_1776911557495446249_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; x &gt; 0 ? 1 : &#40;x &lt; 0 ? -1 : 0&#41;</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='1776911557495446249_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_1776911557495446249\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('1776911557495446249_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_1776911557495446249\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_1776911557495446249\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nT-Mobile has a pay as you go cell phone plan with the following terms:\n\n\n  * You pay 30 per month and this includes the first 1500 minutes or text messages combined.\n  * Each additional minute or message costs 13 cents.\n\n\nWhich of these functions will model this?\n\n::: {.cell execution_count=44}\n\n::: {.cell-output .cell-output-display execution_count=45}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='9126987307636939794' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_9126987307636939794\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_9126987307636939794_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_9126987307636939794\"\n              id=\"radio_9126987307636939794_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; x &gt; 1500 ? 30.0 &#43; 0.13*&#40;x-1500&#41; : 30.0</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_9126987307636939794_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_9126987307636939794\"\n              id=\"radio_9126987307636939794_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; x &gt; 1500 ? 30.0                 : 30.0 &#43; 0.13*x</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_9126987307636939794_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_9126987307636939794\"\n              id=\"radio_9126987307636939794_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; x &gt; 30   ? 13*x &#43; 1500.0        : 30.0</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='9126987307636939794_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_9126987307636939794\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('9126987307636939794_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_9126987307636939794\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_9126987307636939794\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n## Functions of multiple arguments\n\n\nThe concept of a function is of much more general use than its restriction to mathematical functions of single real variable. A natural application comes from describing basic properties of geometric objects. The following function definitions likely will cause no great concern when skimmed over:\n\n::: {.cell execution_count=45}\n``` {.julia .cell-code}\nArea(w, h) = w * h\t\t                   # of a rectangle\nVolume(r, h) = pi * r^2 * h\t                   # of a cylinder\nSurfaceArea(r, h) = pi * r * (r + sqrt(h^2 + r^2)) # of a right circular cone\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\nSurfaceArea (generic function with 1 method)\n```\n:::\n:::\n\n\nThe right-hand sides may or may not be familiar, but it should be reasonable to believe that if push came to shove, they could be looked up. However, the left-hand sides are subtly different – they have two arguments, not one. In `Julia` it is trivial to define functions with multiple arguments – we just did.\n\n\nEarlier we saw the `log` function can use a second argument to express the base. This function is defined by `log(b, x) = log(x) / log(b)`. The `log(x)` value is the natural log, and this definition just uses the change-of-base formula for logarithms.\n\n\nBut not so fast, on the left side is a function with two arguments and on the right side the functions have one argument – yet they share the same name. How does `Julia` know which to use? `Julia` uses the number, order, and *type* of the arguments passed to a function to determine which function definition to use. This is technically known as **multiple dispatch** or **polymorphism**. As a feature of the language, it can be used to greatly simplify the number of functions the user must learn. The basic idea is that many functions are \"generic\" in that they will work for many different scenarios. For example addition. It is defined for real numbers, integers, complex numbers, ... . Each definition may be different, but to the end user only the operator `+` need be used. The rest happens behind the scenes. As an example, to see how many different definitions (\"methods\") are defined in the base `Julia` language for the `log` operator, we can execute:\n\n::: {.cell execution_count=46}\n``` {.julia .cell-code}\nmethods(log)\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```{=html}\n# 40 methods for generic function <b>log</b>:<ul><li> log(A::<b>StridedMatrix{T} where T</b>) in LinearAlgebra at <a href=\"file:///Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.7/LinearAlgebra/src/dense.jl\" target=\"_blank\">/Applications/Julia-1.7.app/Contents/Resources/julia/share/julia/stdlib/v1.7/LinearAlgebra/src/dense.jl:757</a></li> <li> log(A::<b>LowerTriangular</b>) in LinearAlgebra at <a href=\"file:///Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.7/LinearAlgebra/src/triangular.jl\" target=\"_blank\">/Applications/Julia-1.7.app/Contents/Resources/julia/share/julia/stdlib/v1.7/LinearAlgebra/src/triangular.jl:1784</a></li> <li> log(A::<b>Adjoint{<:Any, <:AbstractMatrix}</b>) in LinearAlgebra at <a href=\"file:///Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.7/LinearAlgebra/src/dense.jl\" target=\"_blank\">/Applications/Julia-1.7.app/Contents/Resources/julia/share/julia/stdlib/v1.7/LinearAlgebra/src/dense.jl:785</a></li> <li> log(J::<b>UniformScaling</b>) in LinearAlgebra at <a href=\"file:///Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl\" target=\"_blank\">/Applications/Julia-1.7.app/Contents/Resources/julia/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:174</a></li> <li> log(A::<b>Hermitian{T, S} where S<:(AbstractMatrix{<:T})</b>)<i> where T<:Complex</i> in LinearAlgebra at <a href=\"file:///Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.7/LinearAlgebra/src/symmetric.jl\" target=\"_blank\">/Applications/Julia-1.7.app/Contents/Resources/julia/share/julia/stdlib/v1.7/LinearAlgebra/src/symmetric.jl:870</a></li> <li> log(A::<b>Union{Hermitian{T, S}, Symmetric{T, S}} where S</b>)<i> where T<:Real</i> in LinearAlgebra at <a href=\"file:///Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.7/LinearAlgebra/src/symmetric.jl\" target=\"_blank\">/Applications/Julia-1.7.app/Contents/Resources/julia/share/julia/stdlib/v1.7/LinearAlgebra/src/symmetric.jl:859</a></li> <li> log(x::<b>RoundingMode</b>, y::<b>ForwardDiff.Dual{Ty}</b>)<i> where Ty</i> in ForwardDiff at <a href=\"file:///Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl\" target=\"_blank\">/Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl:145</a></li> <li> log(A::<b>Transpose{<:Any, <:AbstractMatrix}</b>) in LinearAlgebra at <a href=\"file:///Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.7/LinearAlgebra/src/dense.jl\" target=\"_blank\">/Applications/Julia-1.7.app/Contents/Resources/julia/share/julia/stdlib/v1.7/LinearAlgebra/src/dense.jl:786</a></li> <li> log(x::<b>Rational</b>, y::<b>ForwardDiff.Dual{Ty}</b>)<i> where Ty</i> in ForwardDiff at <a href=\"file:///Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl\" target=\"_blank\">/Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl:145</a></li> <li> log(A::<b>UnitLowerTriangular</b>) in LinearAlgebra at <a href=\"file:///Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.7/LinearAlgebra/src/triangular.jl\" target=\"_blank\">/Applications/Julia-1.7.app/Contents/Resources/julia/share/julia/stdlib/v1.7/LinearAlgebra/src/triangular.jl:1785</a></li> <li> log(A::<b>UpperTriangular{T, S} where S<:AbstractMatrix{T}</b>)<i> where T<:Union{Float32, Float64, ComplexF32, ComplexF64}</i> in LinearAlgebra at <a href=\"file:///Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.7/LinearAlgebra/src/triangular.jl\" target=\"_blank\">/Applications/Julia-1.7.app/Contents/Resources/julia/share/julia/stdlib/v1.7/LinearAlgebra/src/triangular.jl:1782</a></li> <li> log(x::<b>Integer</b>, y::<b>ForwardDiff.Dual{Ty}</b>)<i> where Ty</i> in ForwardDiff at <a href=\"file:///Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl\" target=\"_blank\">/Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl:145</a></li> <li> log(D::<b>Diagonal</b>) in LinearAlgebra at <a href=\"file:///Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.7/LinearAlgebra/src/diagonal.jl\" target=\"_blank\">/Applications/Julia-1.7.app/Contents/Resources/julia/share/julia/stdlib/v1.7/LinearAlgebra/src/diagonal.jl:592</a></li> <li> log(d::<b>ForwardDiff.Dual{T}</b>)<i> where T</i> in ForwardDiff at <a href=\"file:///Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl\" target=\"_blank\">/Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl:206</a></li> <li> log(x::<b>ForwardDiff.Dual{Tx}</b>, y::<b>RoundingMode</b>)<i> where Tx</i> in ForwardDiff at <a href=\"file:///Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl\" target=\"_blank\">/Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl:144</a></li> <li> log(x::<b>ForwardDiff.Dual{Tx}</b>, y::<b>Rational</b>)<i> where Tx</i> in ForwardDiff at <a href=\"file:///Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl\" target=\"_blank\">/Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl:144</a></li> <li> log(x::<b>ForwardDiff.Dual{Tx}</b>, y::<b>Integer</b>)<i> where Tx</i> in ForwardDiff at <a href=\"file:///Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl\" target=\"_blank\">/Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl:144</a></li> <li> log(x::<b>ForwardDiff.Dual{Tx}</b>, y::<b>Irrational</b>)<i> where Tx</i> in ForwardDiff at <a href=\"file:///Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl\" target=\"_blank\">/Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl:144</a></li> <li> log(x::<b>ForwardDiff.Dual{Tx}</b>, y::<b>AbstractFloat</b>)<i> where Tx</i> in ForwardDiff at <a href=\"file:///Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl\" target=\"_blank\">/Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl:144</a></li> <li> log(x::<b>ForwardDiff.Dual{Txy}</b>, y::<b>ForwardDiff.Dual{Txy}</b>)<i> where Txy</i> in ForwardDiff at <a href=\"file:///Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl\" target=\"_blank\">/Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl:139</a></li> <li> log(x::<b>ForwardDiff.Dual{Tx}</b>, y::<b>ForwardDiff.Dual{Ty}</b>)<i> where {Tx, Ty}</i> in ForwardDiff at <a href=\"file:///Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl\" target=\"_blank\">/Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl:140</a></li> <li> log(x::<b>ForwardDiff.Dual{Tx}</b>, y::<b>Real</b>)<i> where Tx</i> in ForwardDiff at <a href=\"file:///Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl\" target=\"_blank\">/Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl:144</a></li> <li> log(A::<b>UnitUpperTriangular{T, S} where S<:AbstractMatrix{T}</b>)<i> where T<:Union{Float32, Float64, ComplexF32, ComplexF64}</i> in LinearAlgebra at <a href=\"file:///Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.7/LinearAlgebra/src/triangular.jl\" target=\"_blank\">/Applications/Julia-1.7.app/Contents/Resources/julia/share/julia/stdlib/v1.7/LinearAlgebra/src/triangular.jl:1783</a></li> <li> log(x::<b>Float32</b>) in Base.Math at <a href=\"https://github.com/JuliaLang/julia/tree/742b9abb4dd4621b667ec5bb3434b8b3602f96fd/base/special/log.jl#L266\" target=\"_blank\">special/log.jl:266</a></li> <li> log(::<b>Irrational{:ℯ}</b>) in Base.MathConstants at <a href=\"https://github.com/JuliaLang/julia/tree/742b9abb4dd4621b667ec5bb3434b8b3602f96fd/base/mathconstants.jl#L123\" target=\"_blank\">mathconstants.jl:123</a></li> <li> log(x::<b>Irrational</b>, y::<b>ForwardDiff.Dual{Ty}</b>)<i> where Ty</i> in ForwardDiff at <a href=\"file:///Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl\" target=\"_blank\">/Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl:145</a></li> <li> log(::<b>Irrational{:ℯ}</b>, x::<b>Number</b>) in Base.MathConstants at <a href=\"https://github.com/JuliaLang/julia/tree/742b9abb4dd4621b667ec5bb3434b8b3602f96fd/base/mathconstants.jl#L124\" target=\"_blank\">mathconstants.jl:124</a></li> <li> log(x::<b>Sym</b>) in SymPy at <a href=\"https://github.com/JuliaPy/SymPy.jl/tree/3736343b8ff1609100704f3ee5d8e1d55e1ca650//src/mathfuns.jl#L43\" target=\"_blank\">/Users/verzani/julia/SymPy/src/mathfuns.jl:43</a></li> <li> log(x::<b>BigFloat</b>) in Base.MPFR at <a href=\"https://github.com/JuliaLang/julia/tree/742b9abb4dd4621b667ec5bb3434b8b3602f96fd/base/mpfr.jl#L678\" target=\"_blank\">mpfr.jl:678</a></li> <li> log(x::<b>Float64</b>) in Base.Math at <a href=\"https://github.com/JuliaLang/julia/tree/742b9abb4dd4621b667ec5bb3434b8b3602f96fd/base/special/log.jl#L269\" target=\"_blank\">special/log.jl:269</a></li> <li> log(::<b>Missing</b>) in Base.Math at <a href=\"https://github.com/JuliaLang/julia/tree/742b9abb4dd4621b667ec5bb3434b8b3602f96fd/base/math.jl#L1223\" target=\"_blank\">math.jl:1223</a></li> <li> log(a::<b>ComplexF16</b>) in Base.Math at <a href=\"https://github.com/JuliaLang/julia/tree/742b9abb4dd4621b667ec5bb3434b8b3602f96fd/base/math.jl#L1202\" target=\"_blank\">math.jl:1202</a></li> <li> log(z::<b>Complex</b>) in Base at <a href=\"https://github.com/JuliaLang/julia/tree/742b9abb4dd4621b667ec5bb3434b8b3602f96fd/base/complex.jl#L608\" target=\"_blank\">complex.jl:608</a></li> <li> log(a::<b>Float16</b>) in Base.Math at <a href=\"https://github.com/JuliaLang/julia/tree/742b9abb4dd4621b667ec5bb3434b8b3602f96fd/base/math.jl#L1201\" target=\"_blank\">math.jl:1201</a></li> <li> log(x::<b>AbstractFloat</b>, y::<b>ForwardDiff.Dual{Ty}</b>)<i> where Ty</i> in ForwardDiff at <a href=\"file:///Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl\" target=\"_blank\">/Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl:145</a></li> <li> log(x::<b>Real</b>) in Base.Math at <a href=\"https://github.com/JuliaLang/julia/tree/742b9abb4dd4621b667ec5bb3434b8b3602f96fd/base/math.jl#L1218\" target=\"_blank\">math.jl:1218</a></li> <li> log(x::<b>Real</b>, y::<b>ForwardDiff.Dual{Ty}</b>)<i> where Ty</i> in ForwardDiff at <a href=\"file:///Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl\" target=\"_blank\">/Users/verzani/.julia/packages/ForwardDiff/UDrkY/src/dual.jl:145</a></li> <li> log(b::<b>Number</b>, x::<b>Sym</b>) in SymPy at <a href=\"https://github.com/JuliaPy/SymPy.jl/tree/3736343b8ff1609100704f3ee5d8e1d55e1ca650//src/mathfuns.jl#L44\" target=\"_blank\">/Users/verzani/julia/SymPy/src/mathfuns.jl:44</a></li> <li> log(b::<b>T</b>, x::<b>T</b>)<i> where T<:Number</i> in Base.Math at <a href=\"https://github.com/JuliaLang/julia/tree/742b9abb4dd4621b667ec5bb3434b8b3602f96fd/base/math.jl#L315\" target=\"_blank\">math.jl:315</a></li> <li> log(b::<b>Number</b>, x::<b>Number</b>) in Base.Math at <a href=\"https://github.com/JuliaLang/julia/tree/742b9abb4dd4621b667ec5bb3434b8b3602f96fd/base/math.jl#L358\" target=\"_blank\">math.jl:358</a></li> </ul>\n```\n:::\n:::\n\n\nThere are many, and likely more to be added as the language matures.\n\n\n### An application of composition and multiple dispatch\n\n\n`Julia`'s multiple dispatch allows multiple functions with the same name. The function that gets selected depends on the arguments given to the function. We can exploit this to simplify our tasks. For example, consider this optimization problem:\n\n\n> For all rectangles of perimeter 20, what is the one with largest area?\n\n\n\nThe start of this problem is to represent the area in terms of one variable. We see next that composition can simplify this task, which when done by hand requires a certain amount of algebra.\n\n\nRepresenting the area of a rectangle in terms of two variables is easy:\n\n::: {.cell execution_count=47}\n``` {.julia .cell-code}\nArea(w, h) = w * h\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\nArea (generic function with 1 method)\n```\n:::\n:::\n\n\nBut the other fact about this problem – that the perimeter is 20 – means that height depends on width. For this question, we can see that $P=2w + 2h$ so that\n\n::: {.cell execution_count=48}\n``` {.julia .cell-code}\nh(w) = (20  - 2*w)/2\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\nh (generic function with 1 method)\n```\n:::\n:::\n\n\nBy hand we would substitute this last expression into that for the area (to get $A=w\\cdot (20-2 \\cdot w)/2 = -w^2 + 10$) and simplify. However, within `Julia` we can let composition do the substitution and leave algebraic simplification for `Julia` to do:\n\n::: {.cell execution_count=49}\n``` {.julia .cell-code}\nArea(w) = Area(w, h(w))\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\nArea (generic function with 2 methods)\n```\n:::\n:::\n\n\nThis might seem odd, as now we have two *different* but related functions named `Area`. Julia will decide which to use based on the number of arguments when the function is called. This allows both to be used on the same line, as above. This usage is not common with computer languages, but is a feature of `Julia` which is built around the concept of *generic* functions with multiple dispatch rules to decide which rule to call.\n\n\nFor example, the `plot` function expects functions of a single numeric variable. Behind the scenes, then the function `A(w)` will be used in this graph:\n\n::: {.cell execution_count=50}\n``` {.julia .cell-code}\nplot(Area, 0, 10)\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n![](functions_files/figure-html/cell-51-output-1.svg){}\n:::\n:::\n\n\nFrom this, we can see that that the width yielding the maximum area is $w=5$, and so $h=5$ as well.\n\n\n## Functions with parameters\n\n\nParameters and function arguments are easily confused. We will use *keywords* for our parameters. Keywords also allow us to specify a default value. Using a keyword is as simple as specifying the desired argument with `key=value`.\n\n\nA simple case is a function which computes the $y$ value on a line $y=mx+b$ from a given $x$ value. Here $m$ and $b$ are parameters. We will give them a default of $1$ and $0$:\n\n::: {.cell execution_count=51}\n``` {.julia .cell-code}\nmxplusb(x; m=1, b=0) = m*x + b\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\nmxplusb (generic function with 1 method)\n```\n:::\n:::\n\n\nThe syntax is to use a semicolon  to separate regular arguments from those with keywords. This is not needed when calling the function:\n\n::: {.cell execution_count=52}\n``` {.julia .cell-code}\nmxplusb(2)\t\t\t\t## 1*2 + 0, using defaults\nmxplusb(2, m=2, b=3)\t\t        ## 2*2 + 3, using passed in values\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\n7\n```\n:::\n:::\n\n\nFor a more complicated example, we revisit this function\n\n\n\n$$\n g(x) = \\tan(\\theta) x + \\frac{32}{200 \\cos\\theta} x -\n     32 \\log\\left(\\frac{200 \\cos\\theta}{200\\cos\\theta - x}\\right).\n$$\n\n\nRather than define the value of and $\\theta$ outside the function, we can pass in the value for this *parameter* in this definition\n\n::: {.cell execution_count=53}\n``` {.julia .cell-code}\nfunction g(x; theta=pi/4)\n\t a = 200*cos(theta)\n\t tan(theta)*x + (32/a)*x - 32*log(a/(a-x))\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\ng (generic function with 1 method)\n```\n:::\n:::\n\n\nThe default means `g(50, theta=pi/4)` would be the same as\n\n::: {.cell execution_count=54}\n``` {.julia .cell-code}\ng(50)\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```\n47.35323911536457\n```\n:::\n:::\n\n\nThe parameter make it easy to look at other types of problems. For example, if the angle were less, would the value of $f$ be smaller or larger?\n\n::: {.cell execution_count=55}\n``` {.julia .cell-code}\ng(50, theta=pi/8)\t\t## smaller in this case.\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```\n19.272845247997708\n```\n:::\n:::\n\n\nPassing in parameters has the big advantage of explicitly showing how `Julia` will find variables used within a function, as otherwise you need to have an understanding of the *scoping rules* in place. (Scoping rules determine where variables that are not passed in as arguments are found when referred to within a function.)\n\n\nA common pattern in the `Julia` ecosystem is to use two positional arguments to pass in the function value(s) *and* the parameter(s) (through `f(x, p)`). A container is typically used for each, but in this example we pass in `x` as a number, and use a *named* tuple container to pass the parameters. The unpacking of parameters can be done in different ways, here we just access the named fields using `Julia`'s access notation (e.g. `p.b` gets the value named `b` from the tuple):\n\n::: {.cell execution_count=56}\n``` {.julia .cell-code}\nfunction mxplusb(x, p)\n   m, b = p.m, p.b\n   m * x + b\nend\np = (m=2, b=1)\nmxplusb(10, p)  # computes 2*10 + 1\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```\n21\n```\n:::\n:::\n\n\n### Practice\n\n\n#### Question: transformations\n\n\nWhich of these function definitions corresponds to shifting the function `f` to the right by `c` units and up by `d` units with a default of $0$ and $0$:\n\n::: {.cell execution_count=57}\n\n::: {.cell-output .cell-output-display execution_count=58}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='11351040985283725880' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_11351040985283725880\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11351040985283725880_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11351040985283725880\"\n              id=\"radio_11351040985283725880_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>g&#40;x; c&#61;0, d&#61;0&#41; &#61; f&#40;c * &#40;x - d&#41;&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11351040985283725880_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11351040985283725880\"\n              id=\"radio_11351040985283725880_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>g&#40;x; c&#61;0, d&#61;0&#41; &#61; c &#43; f&#40;x - d&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11351040985283725880_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11351040985283725880\"\n              id=\"radio_11351040985283725880_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>g&#40;x; c&#61;0, d&#61;0&#41; &#61; c &#43; d&#40;f - x&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11351040985283725880_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11351040985283725880\"\n              id=\"radio_11351040985283725880_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>g&#40;x; c&#61;0, d&#61;0&#41; &#61; d &#43; f&#40;x - c&#41;</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='11351040985283725880_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_11351040985283725880\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('11351040985283725880_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_11351040985283725880\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_11351040985283725880\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question: transformations\n\n\nWhich of these definitions will lengthen the period of a periodic function $f$ by a factor of $c$, with a default of $1$?\n\n::: {.cell execution_count=58}\n\n::: {.cell-output .cell-output-display execution_count=59}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='8491463497094117865' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_8491463497094117865\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_8491463497094117865_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_8491463497094117865\"\n              id=\"radio_8491463497094117865_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>g&#40;x; c&#61;1&#41; &#61; c * f&#40;x&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_8491463497094117865_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_8491463497094117865\"\n              id=\"radio_8491463497094117865_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>g&#40;x; c&#61;1&#41; &#61; c &#43; f&#40;x&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_8491463497094117865_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_8491463497094117865\"\n              id=\"radio_8491463497094117865_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>g&#40;x; c&#61;1&#41; &#61; f&#40;x / c&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_8491463497094117865_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_8491463497094117865\"\n              id=\"radio_8491463497094117865_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>g&#40;x; c&#61;1&#41; &#61; f&#40;c * x&#41;&#41;</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='8491463497094117865_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_8491463497094117865\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('8491463497094117865_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_8491463497094117865\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_8491463497094117865\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question: wavelet transform\n\n\nThe following transform of a function is at the core of wavelet theory:\n\n::: {.cell execution_count=59}\n``` {.julia .cell-code}\ng(t; a=1, b=0) = (1/sqrt(a)) * f((t - b)/a)\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```\ng (generic function with 1 method)\n```\n:::\n:::\n\n\nIf $f(x) = \\sin(x)/x$ and $a=2$ and $b=1$ compute $g(0, a=2, b=1)$.\n\n::: {.cell execution_count=60}\n\n::: {.cell-output .cell-output-display execution_count=61}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='1517425385461183720' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_1517425385461183720\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"1517425385461183720\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='1517425385461183720_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"1517425385461183720\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 0.6780100988420896) <= 0.001);\n  var msgBox = document.getElementById('1517425385461183720_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_1517425385461183720\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_1517425385461183720\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nLet $g$ be defined by:\n\n::: {.cell execution_count=61}\n``` {.julia .cell-code}\nfunction g(x; theta=pi/4)\n\t a = 200*cos(theta)\n\t tan(theta)*x + (32/a)*x + 32*log((a-x)/a)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```\ng (generic function with 1 method)\n```\n:::\n:::\n\n\nFor `x` in 20, 25, 30, 35, 40, 45 degrees, what value will maximize `g(125, theta=x*pi/180)`?\n\n::: {.cell execution_count=62}\n\n::: {.cell-output .cell-output-display execution_count=63}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='6871748825697643547' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_6871748825697643547\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"6871748825697643547\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='6871748825697643547_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"6871748825697643547\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 45) <= 0);\n  var msgBox = document.getElementById('6871748825697643547_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_6871748825697643547\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_6871748825697643547\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n## Anonymous functions\n\n\nA common mathematical notation for a function that emphasizes the fact that $f$ maps $x$ to some value $y$ involving the rule of $f$ is to use an arrow as:\n\n\n\n$$\nx \\rightarrow -16x^2 + 32x\n$$\n\n\nYou can do the exact thing in `Julia` to create a function:\n\n::: {.cell execution_count=63}\n``` {.julia .cell-code}\nx -> -16x^2 + 32x\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```\n#19 (generic function with 1 method)\n```\n:::\n:::\n\n\nThis expression creates a function object, but since we didn't bind it to a variable (that is, we didn't give the function a name) it will be immediately forgotten. Such functions without a name are known as *anonymous functions*.\n\n\nAnonymous functions are very useful when working with functions defined by parameters as they can fix values of a parameter.\n\n::: {.cell execution_count=64}\n``` {.julia .cell-code}\nf(x, p) = cos(x) - x/p\nfn = x -> f(x, 2)  # fn fixes p=2 (a \"closure\")\n```\n\n::: {.cell-output .cell-output-display execution_count=65}\n```\n#21 (generic function with 1 method)\n```\n:::\n:::\n\n\n### Operators\n\n\nIn calculus an *operator* is some operation that takes a function and produces a different, but related function. Calculus has two main operators: the derivative and the integral, as will be discussed elsewhere.\n\n\nIn `Julia` it is natural to use functions which mirror mathematical operators: functions which accept other functions as inputs and can output a function.  In computer science terminology, `Julia` treats functions like *first class objects*.\n\n\nThe `plot` function has been previously used to illustrate some examples. The basic syntax for this call is `plot(f, a, b)`. This fits into a more general template: `verb(function_object, arguments....)`. Other upcoming examples are a \"verb\" for finding derivatives and a \"verb\" for finding integrals.\n\n\nLet's look at a concrete example, where it is natural to both pass in a function *and* return a function.\n\n\nIn a precalculus course, we learn about *transformations of functions* where we relate the function $g(x) = d + af(c(x-b))$ to the function $f(x)$ in terms of the parameters $a$, $b$, $c$, and $d$. Here we focus on $d$ and $b$ which shift up and right.\n\n\nLet's make a function that takes $f$, some specifications, and returns $g$:\n\n::: {.cell execution_count=65}\n``` {.julia .cell-code}\nfunction tform(f; shift_up=0, shift_right=0)\n  x -> shift_up + f(x - shift_right)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=66}\n```\ntform (generic function with 1 method)\n```\n:::\n:::\n\n\nThis basically is $g(x) = d + f(x-b)$, but with longer names. This function takes as its main argument a function (`f`) and returns a function. (The \"arrow\" in the last line is defining an anonymous function for returning.)\n\n\nHere we look at $1/(x-2)$ evaluated at $3$:\n\n::: {.cell execution_count=66}\n``` {.julia .cell-code}\nf(x) = 1/x\ntf(x) = tform(f, shift_right=2)(x) ## returns a function\ntf(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=67}\n```\n1.0\n```\n:::\n:::\n\n\nWe can use the output of `tform` directly in a function call, or make a specific version of the function, as above, by defining it for certain values of its parameters.\n\n\n### Practice\n\n\n#### Question\n\n\nWhat anonymous function will create $\\sin(x^2)$?\n\n::: {.cell execution_count=67}\n\n::: {.cell-output .cell-output-display execution_count=68}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='14777048370536083833' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_14777048370536083833\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14777048370536083833_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14777048370536083833\"\n              id=\"radio_14777048370536083833_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>x -&gt; sin&#40;x^2&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14777048370536083833_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14777048370536083833\"\n              id=\"radio_14777048370536083833_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>x -&gt; sin&#40;x&#41;^2</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14777048370536083833_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14777048370536083833\"\n              id=\"radio_14777048370536083833_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>x -&gt; sin^2&#40;x&#41;</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='14777048370536083833_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_14777048370536083833\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('14777048370536083833_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_14777048370536083833\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_14777048370536083833\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nWhat anonymous function of $x$ will return the polynomial $x^2 - 2x$:\n\n::: {.cell execution_count=68}\n\n::: {.cell-output .cell-output-display execution_count=69}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='7061560825917352191' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_7061560825917352191\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7061560825917352191_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7061560825917352191\"\n              id=\"radio_7061560825917352191_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>&#40;&#41; -&gt; x^2 - 2x</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7061560825917352191_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7061560825917352191\"\n              id=\"radio_7061560825917352191_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>x -&gt;x^2 - 2x</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7061560825917352191_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7061560825917352191\"\n              id=\"radio_7061560825917352191_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>x^2 - 2x -&gt; x</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='7061560825917352191_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_7061560825917352191\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('7061560825917352191_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_7061560825917352191\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_7061560825917352191\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nWhat does this operator do?\n\n::: {.cell execution_count=69}\n``` {.julia .cell-code}\nfunction secant(f, a, b)\n  m = (f(b) - f(a)) / (b-a)\n  x -> f(a) - m * (x - a)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=70}\n```\nsecant (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {.cell execution_count=70}\n\n::: {.cell-output .cell-output-display execution_count=71}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='16361892892406370448' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_16361892892406370448\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16361892892406370448_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16361892892406370448\"\n              id=\"radio_16361892892406370448_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        It produces an error.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16361892892406370448_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16361892892406370448\"\n              id=\"radio_16361892892406370448_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        It returns a function to compute the secant line between a and b.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16361892892406370448_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16361892892406370448\"\n              id=\"radio_16361892892406370448_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        It computes the slope of the secant line.\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='16361892892406370448_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_16361892892406370448\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('16361892892406370448_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_16361892892406370448\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_16361892892406370448\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n#### Question\n\n\nWhat does this function do?\n\n::: {.cell execution_count=71}\n``` {.julia .cell-code}\nfunction mystery(f)\n   x -> -f(x)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=72}\n```\nmystery (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {.cell execution_count=72}\n\n::: {.cell-output .cell-output-display execution_count=73}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='11882632657158522238' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_11882632657158522238\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11882632657158522238_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11882632657158522238\"\n              id=\"radio_11882632657158522238_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        It is a mystery\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11882632657158522238_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11882632657158522238\"\n              id=\"radio_11882632657158522238_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        It returns a function whose graph is that of <code>f</code> reflected through the \\(x\\) axis\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11882632657158522238_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11882632657158522238\"\n              id=\"radio_11882632657158522238_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        It returns a function whose graph is that of <code>f</code> reflected through the \\(y\\) axis\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='11882632657158522238_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_11882632657158522238\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('11882632657158522238_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_11882632657158522238\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_11882632657158522238\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n## Additional details\n\n\nThis section presents some additional details on writing functions in `Julia` that are here for informational purposes only.\n\n\n### Return values, tuples\n\n\nAs mentioned, the value returned by a function is either the last value executed or any value returned by `return`. For a typical real valued function $f$ this is usually just a number. Sometimes it is convenient to return more than one value. For this a *tuple* proves useful:\n\n\nA *tuple* is a container for holding different objects at once. They are made quite simply by enclosing the values in parentheses:\n\n::: {.cell execution_count=73}\n``` {.julia .cell-code}\n(1, \"one\")\n```\n\n::: {.cell-output .cell-output-display execution_count=74}\n```\n(1, \"one\")\n```\n:::\n:::\n\n\nTuples have many uses, but here we want to focus on their use as return values. Here is a somewhat contrived example. Imagine you write a function to compute the value of $f(x) = x^x$, but you want to ensure $x$ is positive, as otherwise there will be an error. You can do this, where we return a value of `NaN` and a message when the user tries to use a negative number:\n\n::: {.cell execution_count=74}\n``` {.julia .cell-code}\nf(x) = x > 0 ?  (x^x, \"\") : (NaN, \"You can't use non-positive numbers\")\n```\n\n::: {.cell-output .cell-output-display execution_count=75}\n```\nf (generic function with 2 methods)\n```\n:::\n:::\n\n\nWe include a message even when the value of $x$ is okay, as it is good practice –though not a requirement of `Julia` – to always return the same type of object, regardless the input.\n\n\nA simple call would be:\n\n::: {.cell execution_count=75}\n``` {.julia .cell-code}\nf(-1)\n```\n\n::: {.cell-output .cell-output-display execution_count=76}\n```\n(NaN, \"You can't use non-positive numbers\")\n```\n:::\n:::\n\n\nWe get a tuple back. `Julia` makes working with tuple return values very easy. We can *destructure* them by simply placing two variable names on the left-hand side:\n\n::: {.cell execution_count=76}\n``` {.julia .cell-code}\na, msg = f(-1)\t\t\t# alternatively: (a, b) = f(-1)\n```\n\n::: {.cell-output .cell-output-display execution_count=77}\n```\n(NaN, \"You can't use non-positive numbers\")\n```\n:::\n:::\n\n\nA less artificial example will be discussed later: the `quadgk` function which estimates the value of an integral. For this computation both the value and an estimated maximum error are of interest, so both are returned as a tuple.\n\n\n### Specializing functions by argument type\n\n\nTypical functions here are real-valued functions of a single variable. The easiest way to use these is to just mimic the regular mathematical notation as much as possible. However, there are times where we want to be specific about what possible values a user can place into a function. For example, a naive function to compute the binomial coefficients,\n\n\n\n$$\n{ n \\choose k } = \\frac{n!}{(n-k)! k!},\n$$\n\n\ncan be specialized to just integer values with:\n\n::: {.cell execution_count=77}\n``` {.julia .cell-code}\nbinom(n::Integer, k::Integer) = factorial(n)/(factorial(n-k) * factorial(k))\n```\n\n::: {.cell-output .cell-output-display execution_count=78}\n```\nbinom (generic function with 1 method)\n```\n:::\n:::\n\n\nThe extra bit `::Integer` specializes `n` and `k` so that this function only is called with both `n` and `k` are of this type.\n\n\nThen we can call our `binom` function as:\n\n::: {.cell execution_count=78}\n``` {.julia .cell-code}\nbinom(10,4)\n```\n\n::: {.cell-output .cell-output-display execution_count=79}\n```\n210.0\n```\n:::\n:::\n\n\nBut not as follows, as $\\pi$ is not an integer:\n\n::: {.cell execution_count=79}\n``` {.julia .cell-code}\nbinom(10, pi)\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: MethodError: no method matching binom(::Int64, ::Irrational{:π})\n\u001b[0mClosest candidates are:\n\u001b[0m  binom(::Integer, \u001b[91m::Integer\u001b[39m) at In[78]:1\n```\n:::\n:::\n\n\n(The actual `binomial` function is much better than this, as it doesn't divide a big number by a big number, which can cause real issues with loss of precision, though it does specialize to integers, and any sub-type. It also always returns an integer, whereas ours returns a floating-point value.)\n\n\nTypes in `Julia` are a more complicated matter than we want to get into here, but we do want to list the common types useful for basic calculus: `Function`, `Real`, `Integer`, `Rational`, `Complex`, and `Number` (real or complex).\n\n\nClearly the latter ones should nest, in that an object of type `Integer` should also be of type `Real`. This means when we specialize a mathematical function, it is enough to specify values of `Real`.\n\n\n### Generic and anonymous functions\n\n\nIn `Julia` there are really two types of functions: *generic functions* and *anonymous functions*. A generic function is created when we use this form to create a function:\n\n::: {.cell execution_count=80}\n``` {.julia .cell-code}\ng1(x) = sin(3x^2 - 2x^3)\n```\n\n::: {.cell-output .cell-output-display execution_count=81}\n```\ng1 (generic function with 1 method)\n```\n:::\n:::\n\n\nAn anonymous function is made when we do something like\n\n::: {.cell execution_count=81}\n``` {.julia .cell-code}\ng2 = x -> sin(3x^2 - 2x^3)\n```\n\n::: {.cell-output .cell-output-display execution_count=82}\n```\n#30 (generic function with 1 method)\n```\n:::\n:::\n\n\nFor the most part the end user can't tell the difference:\n\n::: {.cell execution_count=82}\n``` {.julia .cell-code}\n(g1(1), g2(1))\n```\n\n::: {.cell-output .cell-output-display execution_count=83}\n```\n(0.8414709848078965, 0.8414709848078965)\n```\n:::\n:::\n\n\nBut, there are times when there can be a conflict, in particular when you try to redefine a generic function as an anonymous function:\n\n::: {.cell execution_count=83}\n``` {.julia .cell-code}\ng1 = x -> sin(2x^2)\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: invalid redefinition of constant g1\n```\n:::\n:::\n\n\nOr vice versa. Basically, `Julia` has assigned a certain function type to that name and you can't change that type though you can change the function's definition. (This is one exception to the \"dynamic\" aspect of `Julia`.)\n\n\nWe use the generic function approach in these notes to define our named functions, as the basic notation so closely mirrors the standard math notation.\n\n",
    "supporting": [
      "functions_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}