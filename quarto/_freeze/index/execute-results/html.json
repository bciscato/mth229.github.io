{
  "hash": "412ff8b18e0cf586df7dfb53f6bed397",
  "result": {
    "markdown": "# Preface {.unnumbered}\n\n> These projects use version v1.7 of Julia.\n\n[![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/mth229/229-projects/HEAD) (Binder can be used to access `Julia` remotely.)\n\n\n## Introduction\n\n\nMTH229 at the College of Staten Island is a course to introduce a\nprogramming language to reinforce concepts of a first-semester\ncalculus course from numerical and graphical points of view.\n\nSome sections use the [Julia](http://julialang.org) programming\nlanguage. For `Julia`, the computer-lab \"projects\" are on WeBWorK and\nthere *should* be sufficient background material therein to work\nthrough the details. IN the notes here can be found additional detail\nfor those seeking it. For a more thorough introduction, visit\n[Calculus with Julia](http://calculuswithjulia.github.io).\n\nInstallation details for `Julia` are at the end of this page\n\n----\n\nThese  notes are broken into different sections, where most all sections\nhave some self-grading questions at the end that allow you to test\nyour knowledge of that material. The code should be copy-and-pasteable\ninto a `Julia` session. The code output is similar to what would be\nshown if evaluated in an `IJulia` cell, our recommended interface while\nlearning `Julia`, though some may like the `Pluto` interface as well.\n\nThe notes mostly follow topics of a standard first-semester\ncalculus course after some background material is presented for\nlearning `Julia` within a mathematical framework.\n\nEach topic has a lab project. At CSI, sufficient time is allotted to\ncomplete these projects during the lab class. These projects are\navailable as `IJulia` notebooks or `Pluto` notebooks. (There are also\n`Pluto` notebooks with 5-10 minutes of commentary.) Find links for\nthese near the top of each page of notes.\n\n\nFor example, blank notebooks for test taking, etc. are found by following these links:\n\n[ipynb](https://raw.githubusercontent.com/mth229/229-projects/master/00-blank-notebook.ipynb)\n[(Pluto html)](./229-projects/00-blank-notebook.html)\n\n#### Questions and Answers\n\nQuestion and answers are now presented and completed through  `WeBWorK`.\nThe  `.ipynb` notebooks  only contain modest background details.\n\nThere  are a few idiosyncracies in the `WeBWorK` pages to be aware of:\n\n*  The code examples  are typset in `WeBWorK` as though they  appear in  a *terminal*. A terminal displays  the output of  each  command immediately after execution. In a notebook,  when  a cell  is executed, all the  commands are computed and *only*  the  last  value is shown. (The use of `@show` or `print(...)` can be used to display intermediate values in a  cell.)\n\n* Copy and paste from a `WeBWorK` page into a notebook will usually be unsuccessful, as  numbers  in the  font  used to display computer markup do not copy as ASCII numbers  into a cell. The numbers can be hand edited though.\n\n* While `Julia` is very happy to express its output using scientific notation, `WeBWorK` is not happy to receive the exact output for an answer. Either replace `e` with `E` (as in `1.23e4` would be `1.23E4`) or use decimals.\n\n* For *most* questions with a  numeric answer  it is best to  copy all  16 digits of output. Several  digits are expected to match a  correct answer. For numeric questions where an  estimate is made, say from a graph, this is  significantly relaxed.\n\n* If the answer  is to  be a function, the  automatic grader is  expecting just  the  rule  of the function  (an expression), as in for `f(x) = sin(x)` just enter `sin(x)`.\n\n\n\n\n## Basic ideas\n\n`Julia` makes an excellent choice as a computer supplement for this\nmaterial as its syntax is very similar to standard mathematical\nsyntax. The ability to define mathematical functions using the\nfamiliar `f(x) = ...` notation makes getting started really\neasy. Further, the fact that functions are *first-class objects* means\nthat it is possible to create *higher-order* `Julia` functions that\nmirror the standard operations of calculus. The following pattern is\nused throughout:\n\n```verbatim\naction(function_object, args...)\n```\n\nFor example, the notes use:\n\n* `plot(f, a, b)` to plot `f` over `[a,b]`; `plot!(g)` to add a curve (using `Plots`)\n* `fzero(f, a, b)` or `find_zero(f, (a,b))` to find *a* zero inside the bracketing interval `[a,b]` (from `Roots`)\n* `fzeros(f, a, b)` (or `find_zeros(f, (a,b))`) to find *all* the real zeros of a function `f` in `[a,b]` (from `Roots`)\n* `fzero(f, a)` (or `find_zero(f, a)`) to find *a* zero using initial starting oint `a` (from `Roots`)\n* `limit(f(x), x=>c)` to find the limit of `f` at `c` (from `SymPy`)\n* `f'`  to return a function that computes the derivative of `f` (Added in the `MTH229` package based on the `derivative` function from the `ForwardDiff` package)\n* `diff(f(x),x)` to find a symbolic derivative of `f` (from `SymPy`)\n* `quadgk(f, a, b)` to find the numeric integral of `f` over `(a,b)`\n  (from the `QuadGK` package)\n* `integrate(f(x), x)` to find the symbolic integral of `f` (from the `SymPy` package)\n* `integrate(f(x), (x, a, b))` to find the definite integral over `[a,b]`\n  symbolically (from the `SymPy` package).\n\n\nWith just this basic set of actions, akin to buttons on the calculator, a rich variety of problems can be addressed.\n\n\n## How to use `Julia` in MTH 229\n\n\nUsing `Julia` to complete the projects of MTH 229 can be done in several ways.\n\n### Using the `juliabox` server\n\nCSI students have access to a server that gives access to the jupyter notebooks.\n\n### Installing `Julia` on a personal laptop or computer.\n\nThis is not terribly difficult, but does involve a few additional steps:\n\n* Download and install `Julia` from [julialang.org/](https://julialang.org/downloads/). This will install like any other software for you system. You should use the *latest* released version, currently `v1.8`.\n\n* Start the application\n\nThis opens a  terminal, appearing as follows:\n\n::: {.cell execution_count=1}\n\n::: {.cell-output .cell-output-stdout}\n```\n               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.7.3 (2022-05-06)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |\n\n```\n:::\n:::\n\n\nCommands are typed after the prompt (`> julia`) and executed when the return key is pressed.\n\n\nTry a few commands and see. Adding ``2`` and ``2`` should look like:\n\n```\njulia> 2 + 2\n4\n\njulia>\n```\n\n\nFor this class, some external packages must be loaded. First issue the command\n\n```\nusing MTH229, Plots\n```\n\nThis installs and loads two external packages -- one containing functions for this class, the other providing a plotting environments.\n\nOnce these are installed and loaded, the projects for the class can be\ninstalled following this command:\n\n```\nmth229()\n```\n\nOkay, that should set everything up.\n\nWhen you want to actually use `Julia` for this class, you only need to use these two commands from the command line:\n\n```\nusing IJulia\nnotebook()\n```\n\nIf not already installed, `IJulia` will be installed and configured,\nand then the `notebook` command will open a browser window allowing\nthe selection of one of the projects. Your work will be within a browser window, not the terminal.\n\nThe latter two commands are the only ones needed for subsequent usage, as the packages `MTH229` and `Plots` will be loaded within an `IJulia` notebook.\n\n\n#### Using Pluto notebooks locally\n\n`Pluto` notebooks are easier to install. At the terminal (assuming version 1.7 or higher) run:\n\n```\nusing Pluto\nPluto.run()\n```\n\nThis will open a `Pluto` landing page in a browser tab.\nThe html notebooks linked herein offer a means to \"Edit or run this notebook.\" Download the notebook (it will make a `.jl` file) and then open this within `Pluto`.\n\n\n### Using binder to run the projects  remotely:\n\n[![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/mth229/229-projects/HEAD)\n\nThe link above allows the projects for MTH229 to be run through the web.\n\n* `binder` is a service that runs interactive notebooks through the web. Each notebook is limited in memory and has a 10 minute *inactivity* timeout. Binder notebooks are not persistent, though they do have a button to save to local storage.\n\nBinder takes between 30 seconds and one minute to get up and running. Once a notebook is selected, it takes another 30ish seconds to get the typical packages started.\n\n\n\n----\n\nThis table covers pros and cons for the  approaches mentioned above:\n\n```\n                         Using server    Binder       Local Installation\nSetup ease                  ✓              ✓                 ×\n\nSpeed                       ✓              ×                 ✓\n\nPersistence of work         ×              ×                 ✓\n\nFree                        ✓              ✓                 ✓\n\nUse at home                 ✓              ✓                 ✓\n```\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}